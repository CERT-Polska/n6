# See: http://docs.python.org/2.7/library/logging.config.html#configuration-file-format

#
# Declarations

[loggers]
keys = root,nonstandard_names

[handlers]
keys = syslog,stream,amqp
#keys = syslog,stream,amqp,file

[formatters]
keys = standard,cut_notraceback,cut,n6_syslog_handler

#
# Loggers

# the top-level (root) logger
# (gathers messages from almost all its sub-loggers...)
[logger_root]
level = INFO
handlers = syslog,stream,amqp

# the parent logger for *non-standard-names-dedicated*
# loggers -- each named according to the pattern:
# 'NONSTANDARD_NAMES.<event category name>';
# parser components use these loggers to report any
# non-standard values of the `name` attribute of events
# (see: n6lib.const.CATEGORY_TO_NORMALIZED_NAME)
[logger_nonstandard_names]
level = INFO
handlers = amqp
propagate = 0
qualname = NONSTANDARD_NAMES

#
# Handlers

[handler_syslog]
class = n6lib.log_helpers.N6SysLogHandler
level = ERROR
formatter = n6_syslog_handler
args = ('/dev/log',)

[handler_stream]
class = StreamHandler
level = INFO
formatter = standard
args = ()

[handler_amqp]
class = n6lib.log_helpers.AMQPHandler
level = INFO
args = (None, 'logging', {'exchange_type': 'topic', 'durable': True})
# args = (<connection settings>, <exchange name>, <rest kwargs for exchange_declare()>)
# ^ first item of args should be one of:
#   * None -- then AMQP connection settings will be taken from the global N6Core config,
#     see: 00_global.conf (this possibility is available only for N6Core components,
#     not for N6Portal/N6RestApi components)
#   * a dict -- containg AMQP connection settings ('host', 'port', 'ssl', 'ssl_options'...)

#[handler_file]
#class = FileHandler
#level = NOTSET
#formatter = cut
#args = ('/home/somebody/log_all',)

#
# Formatters

# full information
[formatter_standard]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s

# brief information: no tracebacks, messages no longer than ~2k
[formatter_cut_notraceback]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

# semi-brief information: with tracebacks but messages no longer than: ~2k + traceback length
[formatter_cut]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.CutFormatter

# same as formatter_cut_notraceback but with N6SysLogHandler's `script_basename` field included
[formatter_n6_syslog_handler]
format = n6: %(levelname) -10s %(asctime)s %(script_basename)s, %(name)s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

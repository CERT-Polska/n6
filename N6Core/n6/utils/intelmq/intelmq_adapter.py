#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2017-2019 NASK. All rights reserved.

import time
from collections import MutableMapping

from n6.collectors.generic import BaseCollector
from n6.parsers.generic import BaseParser
from n6.utils.intelmq.intelmq_converter import IntelToN6Converter
from n6lib.log_helpers import (
    get_logger,
    logging_configured,
)


LOGGER = get_logger(__name__)


class IntelToN6(BaseParser):

    """
    IntelToN6 component works as an n6 parser. It uses
    the n6.utils.intelmq.intelmq_converter.IntelToN6Converter
    to properly convert messages from IntelMQ bots to n6-format
    messages, using the attributes mapping.
    """

    converter = IntelToN6Converter()
    queue_name = 'intelmq-to-n6'
    default_binding_key = queue_name
    adapter_binding_key = '#'

    event_type = 'event'
    type = 'file'
    content_type = 'text/csv'
    default_category = 'other'
    default_confidence = 'low'
    default_restriction = 'need-to-know'

    input_queue = {
        'exchange': 'integration',
        'exchange_type': 'topic',
    }

    output_queue = {
        'exchange': 'event',
        'exchange_type': 'topic',
    }

    def make_binding_keys(self):
        return [self.adapter_binding_key]

    def prepare_data(self, source, body, properties):
        self._set_collector_like_properties(source, body, properties)
        return super(IntelToN6, self).prepare_data(source, body, properties)

    def parse(self, data):
        for converted in self.converter.convert(data['raw']):
            with self.new_record_dict(data) as parsed:
                parsed.update(converted)
                self._add_missing_items(parsed, data)
                yield parsed

    def _set_collector_like_properties(self, source, body, properties):
        created_timestamp = int(time.time())
        # generate a message ID, that would be generated by
        # the collector
        message_id = BaseCollector.get_output_message_id(source=source,
                                                         created_timestamp=created_timestamp,
                                                         output_data_body=body)
        properties.message_id = message_id
        properties.source = source
        properties.type = self.type
        properties.timestamp = created_timestamp
        headers = getattr(properties, 'headers')
        if headers is None or not isinstance(headers, MutableMapping):
            properties.headers = {}

    def _add_missing_items(self, parsed, data):
        if 'time' not in parsed:
            parsed['time'] = data['properties.timestamp']
        if 'category' not in parsed:
            parsed['category'] = self.default_category
        if 'confidence' not in parsed:
            parsed['confidence'] = self.default_confidence
        parsed['restriction'] = self.default_restriction


def run_intelmq_to_n6():
    intelmq_to_n6_adapter = IntelToN6()
    with logging_configured():
        intelmq_to_n6_adapter.run()


if __name__ == '__main__':
    run_intelmq_to_n6()

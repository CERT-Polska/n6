import { expect, Page, test } from '@playwright/test';
import { expectToBeVisibleAndEnabled, fillInput, verifyInput } from './utils/tools';
import { MOCKED_MFA_CONFIRM_RESPONSE, MOCKED_SETUP_MFA_RESPONSE, MockedApi } from './utils/mockedApi';
import { mockedNoMfaUserAccount, mockedValidUserAccount, userWithSearchResource } from './utils/mockedUsers';

const mockApiResponses = async (page: Page) => {
  await MockedApi.mockApiRoute(page, '/api/login/mfa', {});
  await MockedApi.getUserInfo(page, userWithSearchResource);
  await MockedApi.mockApiRoute(page, '/api/agreements', []);
};

const submitLogin = async (page: Page) => {
  await page.getByTestId('loginBtn').click();
  await page.waitForURL('/');
};

const logIn = async (login: string, password: string, page: Page) => {
  await page.goto('/');
  await fillForm(page, login, password);
  await submitLogin(page);
};

const provideAndSubmitMfaCode = async (mfaCode: string, page: Page) => {
  await fillInput(page, 'mfaCodeInput', mfaCode);
  await page.getByTestId('loginBtnMfa').click();
};

const logInAtMfaPage = async (mfa_code: string, page: Page) => {
  await provideAndSubmitMfaCode(mfa_code, page);
  await page.waitForURL('/incidents');
};

const fillForm = async (page: Page, email: string, password: string) => {
  await fillInput(page, 'loginInput', email);
  await fillInput(page, 'passwordInput', password);
};

test.afterEach(async ({ page }) => {
  await page.unrouteAll({ behavior: 'ignoreErrors' });
});

test('Display Login Page (1)', async ({ page }) => {
  await page.goto('/');
  await verifyInput(page, 'loginInput');
  await verifyInput(page, 'passwordInput');
  await expect(page.getByTestId('n6Logo')).toBeVisible();
  await expect(page.getByText('Sign in')).toBeVisible();
  await expect(page.getByText("Don't have an account?")).toBeVisible();

  const createAccountLink = page.getByTestId('createAccountBtn');
  await expectToBeVisibleAndEnabled(createAccountLink);

  await expect(page.getByTestId('loginBtn')).toBeVisible();
  await expect(page.getByTestId('forgotPasswordLink')).toBeVisible();

  await expectToBeVisibleAndEnabled(page.getByText('English'));
  await expectToBeVisibleAndEnabled(page.getByText('Polish'));
});

test('Language picker works', async ({ page }) => {
  await page.goto('/');
  await page.getByTestId('languagePickerPL').click();
  await expect(page.getByText('Nie posiadasz konta?')).toBeVisible();
  await page.getByTestId('languagePickerEN').click();
  await expect(page.getByText("Don't have an account?")).toBeVisible();
});

test('Display MFA Login Page (2)', async ({ page }) => {
  await logIn(mockedValidUserAccount.login, mockedValidUserAccount.password, page);
  await expect(page.getByText('Two step verification')).toBeVisible();
  await expect(page.getByText('Enter the code generated by application')).toBeVisible();
  await expect(page.getByTestId('cancelBtnMfa')).toBeVisible();
  await expect(page.getByTestId('loginBtnMfa')).toBeVisible();
  await verifyInput(page, 'mfaCodeInput');
});

test('Log in flow', async ({ page }) => {
  await logIn(mockedValidUserAccount.login, mockedValidUserAccount.password, page);
  await mockApiResponses(page);
  await logInAtMfaPage('123456', page);

  await expect(page.getByTestId('userMenuNavBtn')).toBeVisible();
  await expect(page.getByTestId('navIncidents')).toBeVisible();
});

test.describe('MFA Setup with login', () => {
  const fillAndSubmitMfaCode = async (page: Page, mfaCode: string, inputTestId: string, confirmTestId: string) => {
    await fillInput(page, inputTestId, mfaCode);
    await page.getByTestId(confirmTestId).click();
  };

  test.beforeEach(async ({ page }) => {
    await MockedApi.mockApiRoute(page, '/api/login', MOCKED_SETUP_MFA_RESPONSE, 403);
    await logIn(mockedNoMfaUserAccount.login, mockedNoMfaUserAccount.password, page);
  });

  test.describe('MFA setup page', () => {
    test('Check visibility of MFA setup page elements', async ({ page }) => {
      await expect(page.getByTestId('n6Logo')).toBeVisible();
      await expect(page.getByTestId('mfa-login-config-title')).toBeVisible();
      await expect(page.getByTestId('mfa_key_label')).toBeVisible();
      await expect(page.getByTestId('mfa_secret_key')).toBeVisible();
      await expectToBeVisibleAndEnabled(page.getByTestId('mfa-login-config-input'));
      await expectToBeVisibleAndEnabled(page.getByTestId('mfa-login-config-cancel'));
      await expectToBeVisibleAndEnabled(page.getByTestId('mfa-login-config-confirm'));
    });

    test('Cancel button MFA setup', async ({ page }) => {
      await page.getByTestId('mfa-login-config-cancel').click();
      await expect(page.getByTestId('loginBtn')).toBeVisible();
    });
  });

  test.describe('Successful MFA setup', () => {
    test('Login, setup MFA correctly > show MFA config success page > redirect to Incidents page', async ({ page }) => {
      await MockedApi.mockApiRoute(page, '/api/login/mfa_config/confirm', MOCKED_MFA_CONFIRM_RESPONSE);
      await MockedApi.getUserInfo(page, userWithSearchResource);
      await MockedApi.mockApiRoute(page, '/api/agreements', []);

      await fillAndSubmitMfaCode(page, '123456', 'mfa-login-config-input', 'mfa-login-config-confirm');
      await page.waitForURL('/');

      await expect(page.getByTestId('success-icon')).toBeVisible();
      await expect(page.getByTestId('login-mfa-config-success-title')).toBeVisible();
      await expect(page.getByTestId('login-mfa-config-success-description')).toBeVisible();

      const okBtn = page.getByTestId('login-mfa-config-success-ok-btn');
      await expectToBeVisibleAndEnabled(okBtn);

      await okBtn.click();
      await page.waitForURL('/incidents');

      await expect(page.getByTestId('userMenuNavBtn')).toBeVisible();
      await expect(page.getByTestId('navIncidents')).toBeVisible();
      expect(page.url()).toEqual('https://localhost/incidents');
    });
  });

  test.describe('Unsuccessful MFA setup', () => {
    test.beforeEach(async ({ page }) => {
      await MockedApi.mockApiRoute(page, '/api/login/mfa_config/confirm', {}, 409);
    });

    test.afterEach(async ({ page }) => {
      expect(page.url()).toEqual('https://localhost/');
    });

    test('Incorrect MFA code', async ({ page }) => {
      await fillAndSubmitMfaCode(page, '123456', 'mfa-login-config-input', 'mfa-login-config-confirm');

      await expect(page.getByText('The entered MFA code is not valid.')).toBeVisible();
    });

    test('Not provided MFA code', async ({ page }) => {
      await page.getByTestId('mfa-login-config-confirm').click();

      await expect(page.getByText('Required field')).toBeVisible();
    });

    test('Not a number MFA code', async ({ page }) => {
      await fillAndSubmitMfaCode(page, 'test', 'mfa-login-config-input', 'mfa-login-config-confirm');

      await expect(page.getByText('Value must be number')).toBeVisible();
    });

    test('Show config MFA Error page on 500 code', async ({ page }) => {
      await MockedApi.mockApiRoute(page, '/api/login/mfa_config/confirm', {}, 500);

      await fillAndSubmitMfaCode(page, '123456', 'mfa-login-config-input', 'mfa-login-config-confirm');

      await expect(page.getByTestId('error-icon')).toBeVisible();
      await expect(page.getByTestId('login-mfa-config-error-title')).toBeVisible();
      await expect(page.getByTestId('login-mfa-config-error-description')).toBeVisible();
      const cancelBtn = page.getByTestId('login-mfa-config-error-cancel-btn');

      await expectToBeVisibleAndEnabled(cancelBtn);

      await cancelBtn.click();
      await page.waitForURL('/');
      await expect(page.getByTestId('loginBtn')).toBeVisible();
    });
  });
});

test.describe('Unsuccessful login flow', () => {
  const expectErrorMessage = async (page: Page) => {
    await expect(page.getByText('Something went wrong...')).toBeVisible();
    await expect(
      page.getByText(
        'Sorry, could not log in. Either of the entered credentials was wrong: the login, the password, or the MFA code.'
      )
    ).toBeVisible();
    await expect(page.getByTestId('error-icon')).toBeVisible();
    await expect(page.getByTestId('login-mfa-error-title')).toBeVisible();
    await expect(page.getByTestId('login-mfa-error-description')).toBeVisible();
    await expectToBeVisibleAndEnabled(page.getByTestId('login-mfa-error-tryAgain-btn'));
  };

  test.describe('Invalid login:', () => {
    test('with a capital letter', async ({ page }) => {
      await logIn('notExistingEmail@email.com', mockedValidUserAccount.password, page);

      await expect(page.getByText('Oops... Something went wrong')).toBeVisible();
    });

    test('with a valid letters', async ({ page }) => {
      await logIn('notexistingemail@email.com', mockedValidUserAccount.password, page);
      await provideAndSubmitMfaCode('123456', page);

      await expectErrorMessage(page);
    });
  });

  test('Invalid password', async ({ page }) => {
    await logIn(mockedValidUserAccount.login, 'badPassword', page);
    await provideAndSubmitMfaCode('123456', page);

    await expectErrorMessage(page);
  });

  test('Invalid MFA code', async ({ page }) => {
    await logIn(mockedValidUserAccount.login, mockedValidUserAccount.password, page);
    await MockedApi.mockApiRoute(page, '/api/login/mfa', {}, 403);
    await provideAndSubmitMfaCode('123456', page);

    await expectErrorMessage(page);

    await page.getByTestId('login-mfa-error-tryAgain-btn').click();
    await page.waitForURL('/');
    await expect(page.getByTestId('loginBtn')).toBeVisible();
  });
});

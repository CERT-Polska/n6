html
  head
    title= "n6 Portal GUI Configurator - OpenID Connect SSO Configuration"
    link(rel="stylesheet" type="text/css" href="style.css")
    script(src='app.js')
  body
    h1= "n6 Portal GUI Configurator"
    div#infoMsg.hidden
    div#errorMsg.hidden
    div.formWrapper
      h2= "OpenID Connect Single Sign-on Configuration"
      form(id="configForm")
      div.infoDiv
        p
          | If you want to enable the single sign-on authentication with external (e.g. Keycloak)
          | identity provider, check the "Enable OpenID Connect SSO".
        p
          | Then, you need to paste the configuration of the client that is assigned as the client
          | of GUI into the "JSON Configuration of GUI Client" input.
        p
          | In case you are using Keycloak as the identity provider, log in to admin panel,
          | go to client's settings, to the "Installation" tab. Select the "Keycloak OIDC
          | JSON" format. Copy and paste the options. They will be saved as "keycloak.json"
          | file and used by Keycloak JavaScript adapter.
    div#buttons
      button(type="button")#sendBtn= "Save current settings"
      button(type="button")#resetBtn= "Reset forms"
      button(type="button")#previousBtn= "Go to previous view"
      button(type="button")#nextBtn= "Go to next view"
  script.
    setFormListeners();
    document.querySelector('#nextBtn').addEventListener('click', onNext, false);
    document.querySelector('#previousBtn').addEventListener('click', onPrevious, false);

    function fillForm(data) {
      let formObj = document.querySelector('#configForm');
      let nextBtn = document.querySelector('#nextBtn');
      nextBtn.disabled = true;
      let isConfigReady = fillConfigForm(formObj, data);
      if (isConfigReady) {
        nextBtn.disabled = false;
      }
    }

    function fillConfigForm(parentNode, data) {
      // return the state of config - is it ready or not
      let configReady = true;
      const checkboxLabel = document.createElement('label');
      checkboxLabel.textContent = data['_oidc_schema']['REACT_APP_OIDC_AUTH_ENABLED'];
      const enabledCheckbox = document.createElement('input');
      enabledCheckbox.type = 'checkbox';
      enabledCheckbox.checked = data['REACT_APP_OIDC_AUTH_ENABLED'];
      enabledCheckbox.name = 'enabled_checkbox';
      enabledCheckbox.id = 'enabled_checkbox';
      checkboxLabel.htmlFor = 'enabled_checkbox';
      checkboxLabel.classList.add('checkbox_label');
      parentNode.appendChild(enabledCheckbox);
      parentNode.appendChild(checkboxLabel);
      const btnLabelVals = {en: '', pl: ''};
      try {
        const parsedLabels = JSON.parse(data['REACT_APP_OIDC_BUTTON_LABEL']);
        btnLabelVals['en'] = parsedLabels['en'];
        btnLabelVals['pl'] = parsedLabels['pl'];
      } catch {}
      for (const tag of ['en', 'pl']) {
        const [newInput] = addInputPair(parentNode,
          `${data['_oidc_schema']['REACT_APP_OIDC_BUTTON_LABEL']} - ${tag.toUpperCase()}`,
          `button_label_${tag}`,
          btnLabelVals[tag]);
        if (!newInput.value) {
          configReady = false;
          newInput.classList.add('invalidField');
        }
      }
      const oidcConfig = JSON.stringify(data['OIDC_CONFIG'], null, 2);
      const [oidcInput] = addInputPair(parentNode,
        data['_oidc_schema']['OIDC_CONFIG'],
        'oidc_config',
        oidcConfig,
        'textarea'
      );
      oidcInput.setAttribute('rows', 15);
      if (!enabledCheckbox.checked) {
        oidcInput.setAttribute('disabled', '');
      } else if (!oidcInput.value) {
        configReady = false;
        oidcInput.classList.add('invalidField');
      }
      enabledCheckbox.onchange = (e) => {
        if (e.target.checked) {
          oidcInput.removeAttribute('disabled');
        } else {
          oidcInput.setAttribute('disabled', '');
        }
      }
      return configReady;
    }

    async function getFormData() {
      const configData = await fetch('/getConfig', {
        method: 'GET'
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.error) throw new Error(data.error);
          if (data.warn) showInfoMessage(data.warn);
          return data;
        })
        .catch((e) => {
          showErrorMsg(`Failed to load config data. ${e.message}`);
          console.log(e);
          return;
        });
      const oidcConfigData = await fetch('/getOidcConfig', {
        method: 'GET'
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.error) throw new Error(data.error);
          if (data.warn) showInfoMessage(data.warn);
          return data;
        })
        .catch((e) => {
          showErrorMsg(`Failed to load OpenID Connect Adapter Configuration data. ${e.message}`);
          console.log(e);
          return;
        });
      configData['OIDC_CONFIG'] = oidcConfigData;
      fillForm(configData);
    }

    function getPayloadFromFormData(formId) {
      const form = document.querySelector(formId);
      const enabledCheckbox = form.querySelector('input[name="enabled_checkbox"]');
      const btnLabelEn = form.querySelector('input[name="button_label_en"]');
      const btnLabelPl = form.querySelector('input[name="button_label_pl"]');
      const oidcConfig = form.querySelector('textarea');
      const isOidcEnabled = enabledCheckbox.checked;
      return {
        REACT_APP_OIDC_AUTH_ENABLED: isOidcEnabled,
        REACT_APP_OIDC_BUTTON_LABEL_EN: btnLabelEn.value,
        REACT_APP_OIDC_BUTTON_LABEL_PL: btnLabelPl.value,
        OIDC_CONFIG: isOidcEnabled ? oidcConfig.value : ''
      };
    }

    function onSave() {
      let payload = getPayloadFromFormData('#configForm');
      fetch('/saveOidc', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      })
      .then((response) => {
        if (response.ok) {
          onReset();
          response.text().then((text) => showInfoMessage(`${text}\nGo to next view if you want to edit texts.`));
        } else {
          response.text().then((text) => showErrorMsg(text));
        }
      })
      .catch((e) => {
        showErrorMsg('There was a connection error while attempting to save changes');
        console.error(e);
      });
    }

    function onReset() {
      clearNode('#configForm');
      getFormData();
    }

    function onNext() {
      window.location.href = 'terms';
    }

    function onPrevious() {
        window.location.href = '/';
    }

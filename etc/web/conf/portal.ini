###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html
###

[app:main]
use = egg:n6portal

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =


###
# authentication policy
# https://docs.pylonsproject.org/projects/pyramid/en/latest/api/authentication.html#pyramid.authentication.AuthTktAuthenticationPolicy
###

# in seconds
session_timeout = 3600
# in seconds.
# "0" means reissue on every request requiring authentication
session_reissue_time = 0
# whether the session cookie shall be sent back to the server
# over a secure connection only
session_cookie_secure = true

# should be *either* left blank (then a new secure value is generated
# automatically on each start of the portal backend app) *or* set to a
# **secure unpredictable secret** (!!!); you can generate such a secret,
# e.g., with the command:
#     python -c 'import os, base64; print(base64.b64encode(os.urandom(64), b"-_").decode())'
# (note: *if this option is left blank* then the portal backend app may
# not work properly in a multi-process mode, and also no stuff bound to
# a client session can survive any restart of the app).
session_cookie_sign_secret =


###
# various portal-specific configuration options
###

# The value of the following option determines the time frame,
# in which events are presented on the dashboard (including bar chart).
# The value is 30 by default. We recommend checking how the bar chart behaves
# before changing this value permanently.
portal_dashboard.time_range_in_days = 30
# Uncomment to customize...
;portal_dashboard.counted_categories = cnc, bots, vulnerable, amplifier, malurl

# The value of the following option must be the base URL of the Portal's
# *frontend* (GUI).
#
# The value **always** should:
#
#   * be consistent with the actual configuration (defined somewhere
#     else) of the HTTP(S) service that provides the Portal's *frontend*
#     stuff for clients; let us emphasize: it is **not** about the *API*
#     (aka backend) -- it *is* about the statically served *GUI* (aka
#     frontend) stuff;
#
#   * include the *protocol-specific* part: `https://` or `http://`
#     (beware: the latter should *never* be used for production!);
#
#   * include the *host* part (e.g., `n6.example.org`);
#
#   * **not** include the *query string* part (that starting with `?`)
#     or the *fragment* part (that starting with `#`).
#
# The value **may** also have to include (if needed for consistency with
# the configuration of the aforementioned HTTP(S) service that provides
# the Portal's *frontend*):
#
#   * the *port* part (e.g., `:8433`);
#
#   * initial portions of the *path* part (e.g., `/static/gui`).
#
# Important: the value is supposed to have *no* trailing '/' character
# (no matter whether portions of the *path* part are present or not).
portal_frontend_properties.base_url = https://localhost


###
# knowledge base configuration
###

# Should knowledge base be dispatched at all? If this option is
# false then Portal API endpoints related to the knowledge base
# return 404 and parameter `knowledge_base.base_dir` is being ignored.
knowledge_base.active = false

# The path to the knowledge base directory
knowledge_base.base_dir = ~/.n6_knowledge_base/


###
# mfa and web tokens configuration
###

# Wherever below you see an "INSECURE EXAMPLE VALUE..." -- it is only an
# example, and for security purposes you are strongly advised not to use
# it in the production environment.
#
# You can generate a safe secret using -for example, this command:
#     python -c 'import os, base64; print(base64.b64encode(os.urandom(40), b"-_").decode())'
#
# Copy the result and paste it as a secret value.
#
# Note: each secret value should be different than others!
web_tokens.token_type_to_settings =
    {
        'for_login': {
            'server_secret': 'INSECURE EXAMPLE VALUE (for login tokens) THAT MUST BE REPLACED',
            'token_max_age': 60,
        },
        'for_mfa_config': {
            'server_secret': 'INSECURE EXAMPLE VALUE (for mfa config tokens) THAT MUST BE REPLACED',
            'token_max_age': 3600,
        },
        'for_password_reset': {
            'server_secret': 'INSECURE EXAMPLE VALUE (for password reset tokens) THAT MUST BE REPLACED',
            'token_max_age': 3600,
        },
    }
web_tokens.server_secret_for_pseudo_tokens = INSECURE EXAMPLE VALUE (for pseudo-tokens) THAT MUST BE REPLACED

mfa.server_secret = INSECURE EXAMPLE VALUE (for mfa secret keys) THAT MUST BE REPLACED
mfa.issuer_name = An example *n6* Portal


###
# api key configuration
###

# The following option is related to authentication to *n6* REST API
# (but not to the *n6* Portal's API!) with API keys. Setting this option
# in the Portal API's configuration file makes it possible for Portal
# users to manage their individual API keys.
#
# The value below is only an example, and -- for security purposes --
# you are strongly advised not to use it in a production environment.
#
# You can generate a safe secret using, for example, this command:
#
#     python -c 'import os, base64; print(base64.b64encode(os.urandom(40), b"-_").decode())'
#
# (then copy the line printed to the console and paste it as the value
# of the following option).
#
# Please note that the value of this option has to be identical in the
# *n6* Portal API's and REST API's configuration files (if not, users
# will be unable to authenticate to *n6* REST API with any API keys
# obtained/generated via *n6* Portal).
api_key_based_auth.server_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED


###
# OpenID Connect provider configuration
###

oidc_provider_api.active = false
;oidc_provider_api.server_url =
;oidc_provider_api.realm_name = myrealm
;oidc_provider_api.client_id = n6portal-backend
;oidc_provider_api.client_secret_key = SECRET KEY FETCHED FROM ADMIN PANEL
;oidc_provider_api.verify_ssl = true
;oidc_provider_api.cache_jwks = true
;oidc_provider_api.max_cached_keys = 10


###
# event db configuration
###

# you need to customize the following option in your *_local.ini file


# connection URL, e.g.: mysql+mysqldb://n6:somepassword@localhost/n6
# (it must start with `mysql+mysqldb:` (or just `mysql:`) because other
# dialects/drivers are not supported)
sqlalchemy.url = mysql://root:password@mysql/n6

# DO NOT change this option unless you also adjusted appropriately your database:
;sqlalchemy_event_db_connect_charset = utf8mb4  ; <- this is a legacy stuff, we'll get rid of it...

# The length, in days, of time windows (aka *steps*) in which separate
# (partial) queries will be performed. We (the authors of *n6*) decided
# to partition queries into narrower *step* queries for performance
# reasons, based on our real-world experience. You may want to adjust
# this option to your needs, preferably based on your own performance
# measurements (if your instance of *n6* does not have to deal with
# large amounts of data in its Event DB, you may even want to get rid
# of that partitioning completely, just by setting this option to a
# sufficiently big value, such as 50000).
day_step = 30

# if you want to use SSL, the following options must be set to
# appropriate file paths:
;mysql.api.ssl_cacert = /some/path/to/CACertificatesFile.pem
;mysql.api.ssl_cert = /some/path/to/ClientCertificateFile.pem
;mysql.api.ssl_key = /some/path/to/private/ClientCertificateKeyFile.pem

##########################################################################################
# Enabling SSL on MySQL server (example):
# * execute in the MySQL shell:
#   GRANT ALL PRIVILEGES ON *.* TO 'user'@'%' IDENTIFIED BY 'password' REQUIRE SSL;
#   or
#   GRANT ALL on *.* TO 'user'@'host' REQUIRE
#       SUBJECT '/O=.../...'
#       AND ISSUER '/O=.../...';
# * add SSL configuration to mysql server in file /etc/my.cnf in section [mysqld]:
#   ssl-ca=/some/path/to/CACertificatesFile.pem
#   ssl-cert=/some/path/to/ServerCertificateFile.pem
#   ssl-key=/some/path/to/private/ServerCertificateKeyFile.pem
##########################################################################################


###
# auth db configuration
###

# connection URL, e.g.: mysql+mysqldb://n6:somepassword@localhost/n6
# (it must start with `mysql+mysqldb:` (or just `mysql:`) because other
# dialects/drivers are not supported)
auth_db.url = mysql://root:password@mysql/auth_db

# if you want to use SSL, the following options must be set to
# appropriate file paths:
;auth_db.ssl_cacert = /some/path/to/CACertificatesFile.pem
;auth_db.ssl_cert = /some/path/to/ClientCertificateFile.pem
;auth_db.ssl_key = /some/path/to/private/ClientCertificateKeyFile.pem


###
# configuration of mail notices, mail sending API and jinja rendering
###

# Note: the *mail notices* feature engages the 3 groups (sections) of
# options:
#
# * the `mail_notices_api.*` options
#   -- directly related to `MailNoticesAPI` from `n6lib.mail_notices_api`,
#
# * the `mail_sending_api.*` options
#   -- directly related to `MailSendingAPI` from `n6lib.mail_sending_api`,
#
# * the `jinja_template_based_renderer.*` options
#   -- directly related to `JinjaTemplateBasedRenderer.from_predefined()`
#      from `n6lib.jinja_helpers`.
#
# The `MailSendingAPI` and/or `JinjaTemplateBasedRenderer` tools, though
# somewhat lower-level ones, can also be used on their own (then only
# the group of options directly related to the particular tool is
# relevant).

###
# [the following group of options relates directly to `MailNoticesAPI`]

# Should mail notices be dispatched at all? If this option is
# false then any invocations of a dispatcher obtained from a
# context manager returned by the `MailNoticesAPI.dispatcher()`
# method do nothing, and *none* of other `mail_notices_api.*`,
# `mail_sending_api.*` and `jinja_template_based_renderer.*`
# options are used by the *mail notices* machinery.
mail_notices_api.active = true

# The value of the following option, if not being empty, should
# be a Python dict literal representing a dict that maps *notice
# keys* (str, e.g.: 'org_config_update_requested') to dicts that
# map 2-character codes of a supported *language* (such as 'EN'
# or 'PL) to dicts specifying the following mail components:
# *body*, *subject*, *sender* and (optionally) *misc headers*
# (which stands for *miscellaneous mail headers*).
#
# Lack of a certain *notice key* means that the mail notices
# stuff is not active for that *notice key* (meaning that any
# invocations of a dispatcher obtained from a context manager
# returned by any `MailNoticesAPI.dispatcher(<that notice key>)`
# call do nothing).
#
# Each of the *mail components* dicts (i.e., the dicts mentioned
# above as those specifying mail components) contains some or
# all of the following items:
#
# * 'body' -- a *string value* (required),
#
# * 'subject' -- a *string value* (required),
#
# * 'sender' -- a *string value* (required if the value of
#   the `default_sender` option [see below] is left empty,
#   otherwise optional),
#
# * 'misc_headers' -- a dict that maps any mail header names
#   to their values, specified as *string values* (optional);
#
# **Important note:** each of the *string values* mentioned
# above shall be a string which is:
#
# * (1) **either** a Jinja template name preceded with a `$:`
#   (*dollar sign* followed by *colon*) marker,
#
# * (2) **or** any other string -- which *literally* specifies
#   the item's value (**no HTML/XML escaping** will be applied
#   to it!).
#
# Ad (1): those Jinja templates will be used by an instance of
# `JinjaTemplateBasedRenderer` (see `n6lib.jinja_helpers` and
# the `jinja_template_based_renderer.*` config options) as the
# basis for rendering of actual values -- with the *rendering
# context* containing the `data_dict` variable being a deep copy
# of the `notice_data` dict passed in to the dispatcher [where
# *dispatcher* is a callable object obtained as the `as` target
# (`__enter__()`'s return value) of a context manager returned
# by `MailNoticesAPI.dispatcher()`].
#
# **Beware** that HTML/XML escaping will be applied **only if**
# the template name has a `.html`, `.htm` or `.xml` suffix
# (checked in a case-insensitive manner).
#
# For example templates -- see the template files in the
# `data/templates` subdirectory of the `n6lib` package source
# tree.
#
# The default value of this option seems to be quite sensible
# for most important use cases. The basic versions of the
# Jinja templates it refers to are already defined in the
# `data/templates` subdirectory of the `n6lib` package; note:
# you can customize them by creating your own template files --
# named the same but placed in (an)other location(s) (specified
# with the `jinja_template_based_renderer.template_locations`
# configuration option).
;mail_notices_api.notice_key_to_lang_to_mail_components =
;    {
;        'mfa_config_done': {
;            'EN': {
;                'subject':
;                    'New configuration of multi-factor authentication',
;                'body': '$:mail_notice__mfa_config_done__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    u'Nowa konfiguracja uwierzytelniania wielosk\u0142adnikowego',
;                'body': '$:mail_notice__mfa_config_done__PL.txt',
;            },
;        },
;        'mfa_config_erased': {
;            'EN': {
;                'subject':
;                    'Deleted configuration of multi-factor authentication',
;                'body': '$:mail_notice__mfa_config_erased__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    u'Usuni\u0119ta konfiguracja uwierzytelniania wielosk\u0142adnikowego',
;                'body': '$:mail_notice__mfa_config_erased__PL.txt',
;            },
;        },
;
;        'new_org_and_user_created': {
;            'EN': {
;                'subject':
;                    'Welcome to the n6 system',
;                'body': '$:mail_notice__new_org_and_user_created__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    u'Witamy w systemie n6',
;                'body': '$:mail_notice__new_org_and_user_created__PL.txt',
;            },
;        },
;
;        'org_config_update_requested': {
;            'EN': {
;                'subject':
;                    'A new request to update the organization configuration',
;                'body': '$:mail_notice__org_config_update_requested__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    'Nowa propozycja zmian w konfiguracji Twojej organizacji',
;                'body': '$:mail_notice__org_config_update_requested__PL.txt',
;            },
;        },
;        'org_config_update_applied': {
;            'EN': {
;                'subject':
;                    'Acceptance of the requested update of the organization configuration',
;                'body': '$:mail_notice__org_config_update_applied__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    'Akceptacja zmian w konfiguracji Twojej organizacji',
;                'body': '$:mail_notice__org_config_update_applied__PL.txt',
;            },
;        },
;        'org_config_update_rejected': {
;            'EN': {
;                'subject':
;                    'Rejection of the requested update of the organization configuration',
;                'body': '$:mail_notice__org_config_update_rejected__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    'Odmowa wprowadzenia zmian w konfiguracji Twojej organizacji',
;                'body': '$:mail_notice__org_config_update_rejected__PL.txt',
;            },
;        },
;
;        'password_reset_done': {
;            'EN': {
;                'subject':
;                    'New log-in password',
;                'body': '$:mail_notice__password_reset_done__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    u'Nowe has\u0142o logowania',
;                'body': '$:mail_notice__password_reset_done__PL.txt',
;            },
;        },
;        'password_reset_requested': {
;            'EN': {
;                'subject':
;                    'Setting new log-in password',
;                'body': '$:mail_notice__password_reset_requested__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    u'Ustawianie nowego has\u0142a logowania',
;                'body': '$:mail_notice__password_reset_requested__PL.txt',
;            },
;        },
;    }

# The following option specifies (using a 2-character string)
# the *default language* -- to be used when *neither* of the
# `MailNoticesAPI.dispatcher()` and `<the obtained dispatcher>()`
# invocations has included the `lang` argument (specifying the
# desired mail notice language variant); but also when it has
# been included but its value is missing from the *notice key*-
# specific subdict of the `notice_key_to_lang_to_mail_components`
# dict (see its description above).
;mail_notices_api.default_lang = EN

# The value of the following option, if not left empty, should
# be a text to be used as the default value of the 'sender'
# item of subdicts that define mail components (see the above
# description of the `notice_key_to_lang_to_mail_components`
# option; the remarks about `$:`-prepended *template names*
# and HTML/XML escaping apply also here).
mail_notices_api.default_sender = n6notices@example.org

# The value of the following option, if not left empty, should
# be a Python dict literal that defines additional mail headers,
# to be used to complement (but never overwrite) the items of
# each 'misc_headers' dict (ad 'misc_headers` -- see the above
# description of the `notice_key_to_lang_to_mail_components`
# option; the remarks about `$:`-prepended *template names* and
# HTML/XML escaping apply also here).
;mail_notices_api.common_misc_headers =

###
# [the following group of options relates directly to `MailSendingAPI`]

mail_sending_api.smtp_host=mailhog
mail_sending_api.smtp_port=1025
;mail_sending_api.smtp_login=
;mail_sending_api.smtp_password=

###
# [the following group of options relates directly to
# `JinjaTemplateBasedRenderer.from_predefined()`]

# The value of the following option should consist of (one or
# more) comma-separated template locations that will be tried,
# in the specified order, by Jinja template loaders when
# searching for templates.
#
# Each of these locations should be:
#
# * An *absolute* path of a directory (aka folder); if it makes
#   use of a tilde-based home directory placeholder prefix, such
#   as `~` or `~username`, the placeholder will be automatically
#   expanded.
#   Examples:
#     /etc/n6/templates
#     ~/my-own-n6-stuff/jinja-related
#     ~dataman/.n6/our-custom-fancy-templates
#
# *OR*
#
# * A specification in the following format:
#     @<package name>:<package subdirectory path>
#   where:
#      * <package name> is a Python package name
#        (see also: the docs of the `jinja2.PackageLoader`'s
#        parameter `package_name`);
#      * <package subdirectory path> is a *relative* path of
#        a directory (folder) in that package's source tree
#        (see also: the docs of the `jinja2.PackageLoader`'s
#        parameter `package_path`).
#   Examples:
#     @n6lib:data/templates
#     @my.own.package:some-dir/sub-dir/sub-sub-dir
jinja_template_based_renderer.template_locations = @n6lib:data/templates

# The default value ("utf-8") of the following option, should be
# OK in nearly all cases.
;jinja_template_based_renderer.template_encoding = utf-8

# The following option is relevant *only* to template locations
# specified as absolute paths of directories (*not* to those in
# the `@<package name>:<package subdirectory path>` format).
;jinja_template_based_renderer.follow_symlinks = False

# The value of the following option should consist of (zero or
# more) comma-separated *import names* of Jinja extensions (see:
# https://jinja.palletsprojects.com/extensions/). Typically, it
# should contain, at the minimum, the "jinja2.ext.do" name -- at
# least, as long as any of the default templates (those bundled
# with *n6*) are in use.
;jinja_template_based_renderer.jinja_extensions = jinja2.ext.do


###
# rt client configuration
###

# Should the RT stuff be used at all? (if false, any invocations
# of the `RTClientAPI.new_ticket()` method do nothing, and no
# other `rt.*` configuration options are really used)
rt.active = false

rt.rest_api_url = https://some-host.example.org/rt/REST/1.0/
rt.username = root       ; `root` is default user name in RT from DockerHub
rt.password = password   ; `password` is default user password in RT from DockerHub

# The value of the following option, if not left empty, should
# be a Python dict literal that, separately for each *ticket
# kind* (identified by a string), specifies the RT fields to
# be submitted to the RT REST API to create a new RT ticket.
# Each key in the dict is a *ticket kind* key (such as
# 'registration_requested' or 'org_config_update_requested')
# and each value is a subdict.
#
# Lack of a certain *ticket kind* key means that the RT stuff is
# not active for that *ticket kind* (i.e., invocations of the
# method `RTClientAPI.new_ticket()` with that *ticket kind* key
# as the first argument do nothing).
#
# The following requirements and remarks apply to the keys and
# values of each of aforementioned subdicts:
#
# * ad keys:
#   * each key should be a string being an RT field name;
#   * custom RT fields can be specified with keys such as
#     'CF_MyCustomFldName';
#   * the `Queue` field *must* be included;
#   * the 'id' field must *not* be included;
#
# * ad values:
#   * each value should be a string being a Jinja template
#     of the actual RT field value, to be rendered with a
#     context that includes the 'data_dict' variable whose value
#     is the `data_dict` argument taken by the `new_ticket()`
#     method of an `n6lib.rt_client_api.RTClientAPI` instance;
#   * the *autoescape* Jinja option is *enabled*; if you are
#     absolutely sure that, for some expression, you need to
#     *disable* HTML escaping, mark that expression with the
#     `safe` Jinja filter, e.g.:
#         {{ data_dict['some_item']|safe }}
#     (BEWARE: doing that without proper thought is *dangerous*
#     as it may result in an HTML injection/XSS vulnerability!).
#
# In the case of the 'registration_requested' ticket kind, the
# aforementioned `data_dict` (taken by `RTClientAPI.new_ticket()` and
# placed in the Jinja rendering context as the 'data_dict' variable)
# is a dict containing all items of the submitted registration request
# (`org_id`, `email`, `actual_name` and so on...). To find out what
# items are valid, see the `new_req_pure_data` dict created within the
# `AuthManageAPI.create_registration_request()` method (which is defined
# in the `n6lib.auth_db.api` module); moreover, the `id` item is always
# set to the request's identifier in the Auth DB.
#
# In the case of the 'org_config_update_requested' ticket kind, the
# `data_dict` is a dict containing current data of the concerned org,
# and also -- in the `update_info` subdict -- all relevant data of the
# concerned org config update request. To find out what items are valid,
# see the comment near the end of the file `N6lib/n6lib/data_templates/
# mail_notice__org_config_update_requested__EN.txt` (note: that file
# relates to a completely different feature [mail notices] but the set
# of items of `data_dict` is the same).
#
# The following value of this option is just an example; you may want to
# adjust it to your needs and then uncomment it.
;rt.new_ticket_kind_to_fields_render_spec = {
;        'registration_requested': {
;            'Queue': 'General',
;            'Priority': '1',
;            'Requestor': '{{ data_dict.email }}',
;            'Subject': 'Registration request from {{ data_dict.org_id }}',
;            'Content-Type': 'text/html; charset="UTF-8"',
;            'Text': """<!DOCTYPE html><html>
;                <head>
;                    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
;                </head>
;                <body>
;                    <p>
;                        A <a href="https://localhost:4444/registrationrequest/edit/?url=%%2Fregistrationrequest%%2F&id={{ data_dict.id }}">registration request</a> from
;                        the organization <strong>{{ data_dict.org_id }}</strong>
;                        {%%- if data_dict.actual_name %%} ({{ data_dict.actual_name }}){%% endif %%}:
;                    </p>
;                    <ul>
;                        <li>
;                            The contact e-mail address:
;                            <strong>{{ data_dict.email }}</strong>
;                            <br><small>(it can also be a good candidate for the login of the organization's first user)</small>
;                        </li>
;                        {%% if data_dict.asns %%}
;                            <li>
;                                The organization's ASNs (autonomous system numbers):
;                                <strong>{{ data_dict.asns|join(', ') }}</strong>
;                            </li>
;                        {%% endif %%}
;                        {%% if data_dict.fqdns %%}
;                            <li>
;                                The organization's FQDNs (domain names):
;                                <strong>{{ data_dict.fqdns|join(', ') }}</strong>
;                            </li>
;                        {%% endif %%}
;                        {%% if data_dict.ip_networks %%}
;                            <li>
;                                The organization's IP networks (in the CIDR notation):
;                                <strong>{{ data_dict.ip_networks|join(', ') }}</strong>
;                            </li>
;                        {%% endif %%}
;                    </ul>
;                    <p>
;                        <small>(The rest of the registration request data can be examined
;                               in the n6 Administration Panel &emdash; see the above link.)</small>
;                    </p>
;                    <p>
;                        The registration request has been submitted by
;                        {{ data_dict.submitter_title }}
;                        <strong>{{ data_dict.submitter_firstname_and_surname }}</strong>
;                        ({{ "{:%%Y-%%m-%%d %%H:%%M} UTC".format(data_dict.submitted_on) }}).
;                    </p>
;                </body>
;            </html>""",
;        },
;        'org_config_update_requested': {
;            'Queue': 'General',
;            'Priority': '1',
;            'Requestor': '{{ data_dict.update_info.requesting_user }}',
;            'Subject': 'Organization configuration update request from {{ data_dict.org_id }}',
;            'Content-Type': 'text/html; charset="UTF-8"',
;            'Text': """<!DOCTYPE html><html>
;                <head>
;                    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
;                </head>
;                <body>
;                    <p>
;                        An <a href="https://localhost:4444/orgconfigupdaterequest/edit/?url=%%2Forgconfigupdaterequest%%2F&id={{ data_dict.update_info.update_request_id }}">organization configuration update request</a> from
;                        the organization <strong>{{ data_dict.org_id }}</strong>
;                        {%%- if data_dict.actual_name %%} ({{ data_dict.actual_name }}){%% endif %%}:
;                    </p>
;                    <ul>
;                        {%%- set key_descr_pairs = [
;                            ("actual_name", "The actual name of the organization"),
;                            ("notification_enabled", "Whether e-mail notifications on new events should be delivered"),
;                            ("notification_language", "The language of e-mail notifications on new events"),
;                            ("notification_emails", "The addresses of the recipients of e-mail notifications on new events"),
;                            ("notification_times", "The hours (in this n6 instance's local time zone) of sending e-mail notifications on new events"),
;                            ("asns", "The organization's ASNs (autonomous system numbers)"),
;                            ("fqdns", "The organization's FQDNs (domain names)"),
;                            ("ip_networks", "The organization's IP networks (in the CIDR notation)"),
;                        ] %%}
;                        {%%- for key, description in key_descr_pairs %%}
;                            {%%- if key in data_dict.update_info %%}
;                                {%%- set old_value = data_dict[key] %%}
;                                {%%- set upd_value = data_dict.update_info[key] %%}
;                                {%%- if key == 'notification_enabled' %%}
;                                    {%%- set old_value = 'yes' if old_value else 'no' %%}
;                                    {%%- set upd_value = 'yes' if upd_value else 'no' %%}
;                                {%%- elif upd_value is sequence and upd_value is not string %%}
;                                    {%%- if key == 'notification_times' %%}
;                                        {%%- set old_formatted = [] %%}
;                                        {%%- set upd_formatted = [] %%}
;                                        {%%- for t in old_value %%}
;                                            {%%- do old_formatted.append('{t.hour}:{t.minute:02}'.format(t=t)) %%}
;                                        {%%- endfor %%}
;                                        {%%- for t in upd_value %%}
;                                            {%%- do upd_formatted.append('{t.hour}:{t.minute:02}'.format(t=t)) %%}
;                                        {%%- endfor %%}
;                                        {%%- set old_value = old_formatted %%}
;                                        {%%- set upd_value = upd_formatted %%}
;                                    {%%- endif %%}
;                                    {%%- set old_value = old_value|join(', ') %%}
;                                    {%%- set upd_value = upd_value|join(', ') %%}
;                                {%%- endif %%}
;                                <li>
;                                    {{ description|safe }}:
;                                    <br>&bull; [currently] <strong>{{ old_value|default('(not set)', boolean=true) }}</strong>
;                                    <br>&bull; [requested] <strong>{{ upd_value|default('(not set)', boolean=true) }}</strong>
;                                </li>
;                            {%%- endif %%}
;                        {%%- endfor %%}
;                    </ul>
;                    {%%- if data_dict.update_info.additional_comment|trim %%}
;                        <p>
;                            The user who submitted the request enclosed the following comment:
;                        </p>
;                        <pre>{{ data_dict.update_info.additional_comment }}</pre>
;                    {%%- endif %%}
;                    <p>
;                        Submitted by the user
;                        <strong>{{ data_dict.update_info.requesting_user }}</strong>
;                        ({{ "{:%%Y-%%m-%%d %%H:%%M} UTC".format(data_dict.update_info.update_request_time) }}).
;                    </p>
;                </body>
;            </html>""",
;        },
;    }


###
# dev/test server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543


###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

[loggers]
keys = root, n6portal, sqlalchemy

[handlers]
keys = console, syslog
;keys = console, syslog, amqp
;keys = console, syslog, amqp, file

[formatters]
keys = generic, cut_notraceback, only_message, time_and_message


[logger_root]
level = INFO
handlers = console, syslog
;handlers = console, syslog, amqp

[logger_n6portal]
level = INFO
handlers =
# (propagate to the root handler)
propagate = 1
qualname = n6portal

[logger_sqlalchemy]
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)
level = WARN
handlers =
propagate = 1
qualname = sqlalchemy.engine


[handler_syslog]
class = handlers.SysLogHandler
level = ERROR
formatter = cut_notraceback
args = ('/dev/log',)

[handler_console]
class = StreamHandler
level = WARN
formatter = generic
args = (sys.stderr,)

;[handler_amqp]
;class = n6lib.log_helpers.AMQPHandler
;level = INFO
;formatter = generic
# * AMQPHandler's `args` in the variant for
#   client-certificate-based authentication:
;args = (
;    {
;        'host': '195.187.7.77',
;        'port': 5671,
;        'ssl': True,
;        'ssl_ca_certs': '/some/path/to/CACertificatesFile.pem',
;        'ssl_certfile': '/some/path/to/ClientCertificateFile.pem',
;        'ssl_keyfile': '/some/path/to/private/ClientCertificateKeyFile.pem',
;    },
;    'logging',
;    {'exchange_type': 'topic', 'durable': True})
# * AMQPHandler's `args` in the variant for
#   username+password-based authentication:
;args = (
;    {
;        'host': '195.187.7.77',
;        'port': 5671,
;        'ssl': True,
;        'ssl_ca_certs': '/some/path/to/CACertificatesFile.pem',
;        'password_auth': True,
;        'username': '<some username>',
;        'password': '<some password -- at least 16 characters long>',
;    },
;    'logging',
;    {'exchange_type': 'topic', 'durable': True})
# ^
# Note: for a handler whose `class` is n6lib.log_helpers.AMQPHandler, the value of
# `args` is expected to be a Python tuple:
#
#    (<connection settings>, <exchange name>, <rest kwargs for exchange_declare()>)
#
# -- where <connection settings> should be:
#
#   a dict -- containing the AMQP connection settings being just **kwargs ready to
#   be passed to `n6lib.amqp_helpers.get_amqp_connection_params_dict_from_args()`
#   (see the signature and implementation of that function...)
#
#   [or alternatively -- if we say about the *legacy format* which is *deprecated*
#   and *should be avoided*: a dict ready to be passed directly to the constructor
#   `n6lib.amqp_getters_pushers.AMQPThreadedPusher` as the `connection_params_dict`
#   keyword argument...]

;[handler_file]
;class = FileHandler
;level = NOTSET
;formatter = cut
;args = ('/home/somebody/log_all',)


[formatter_generic]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s

# brief information: no tracebacks, messages no longer than ~2k
[formatter_cut_notraceback]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

[formatter_only_message]
format = %(message)s

[formatter_time_and_message]
format = [%(asctime)s] %(message)s

# Example/prototype of *n6 Broker Auth API* server app configuration
# (variant which may be more convenient when it comes to development)
#
# See also:
# * `etc/web/conf/brokerauthapi.ini`
#   (may be more convenient when preparing production config...)
# * `N6BrokerAuthApi` (the related *n6* package's source code)
# * https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html


[app:main]
use = egg:n6brokerauthapi#main

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
    pyramid_debugtoolbar

# By default, the toolbar only appears for clients from IP addresses
# '127.0.0.1' and '::1'.
;debugtoolbar.hosts = 127.0.0.1 ::1


###
# auth db configuration
###

# *This option is always required:*
# connection URL, e.g.: mysql+mysqldb://someuser:somepassword@somehostname/some_db_name
# (it must start with `mysql+mysqldb:` (or just `mysql:`) because other dialects/drivers
# are not supported).
#
# *** Remember to configure a **secure** secret ***
# *** password for any production purposes!!!!! ***
auth_db.url = mysql://user:password@localhost/auth_db

# If you want to use SSL, the following options must be set to
# appropriate file paths...
#
# *** Remember to provide paths to dedicated **secure** ***
# *** certificates + key for any production purposes!!! ***
# *** (*NOT* to these example/demonstration-only ones!) ***
;auth_db.ssl_cacert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ca-cert-n6-service-ca.pem
;auth_db.ssl_cert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-cert---n6-service-ca-00000000000000000018.pem
;auth_db.ssl_key = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-key---n6-service-ca-00000000000000000018.pem

# Additional options related to Auth-DB
# (their default values are usually OK!):
#
auth_db_connection_pool.pool_pre_ping = true
auth_db_connection_pool.pool_recycle = 3600
auth_db_connection_pool.pool_timeout = 20
auth_db_connection_pool.pool_size = 15
auth_db_connection_pool.max_overflow = 12
#
# Note: any MySQL (MariaDB) variables specified here as
# `auth_db_session_variables.<variable> = <value>` will
# be set by executing: `SET SESSION <variable> = <value>`.
# WARNING: for simplicity, the variable names and values will
# be inserted into SQL code "as is", *without* any escaping
# (we assume we can treat configuration files as *trusted*).
#
# (`auth_db_session_variables.wait_timeout` should be greater
# than `auth_db_connection_pool.pool_recycle` -- see above...)
auth_db_session_variables.wait_timeout = 7200


###
# `n6brokerauthapi`-specific configuration
###

broker_auth_api.auth_manager_maker_class = n6brokerauthapi.auth_stream_api.StreamApiBrokerAuthManagerMaker

# Important: the value of the following option has to be identical
# to the value of the `api_key_based_auth.server_secret` option in
# the *n6* Portal API's configuration. If not, users will be unable to
# authenticate to *n6* Stream API with any API keys obtained/generated
# via *n6* Portal).
#
# Important: the value below is only an example, and -- for security
# purposes -- you are strongly advised not to use it in a production
# environment.
#
# *** Remember to provide a **secure** secret ***
# *** value for any production purposes!!!!!! ***
stream_api_broker_auth.server_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED

# The rest of the
# `n6brokerauthapi.auth_stream_api.StreamApiBrokerAuthManagerMaker`-specific
# configuration (to be uncommented and adjusted if defaults are not sufficient):
;stream_api_broker_auth.push_exchange_name = _push
;stream_api_broker_auth.autogenerated_queue_prefix = stomp


###
# dev-or-manual-tests-only server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543


###
# logging configuration
# https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

#
# Declarations

[loggers]
keys = root, auth_db_audit_log, sqlalchemy_engine

[handlers]
keys = console, dummy

[formatters]
keys = standard, level_time_and_message

#
# Loggers

# the top-level (root) logger
# (gathers messages from almost all its sub-loggers...)
[logger_root]
level = INFO
handlers = console

# the Auth-DB-Audit-Log-dedicated logger
# (log messages are JSON-serialized dicts conveying information on
# any changes to Auth DB contents; see `n6lib.auth_db.audit_log`)
[logger_auth_db_audit_log]
level = INFO
handlers = console
propagate = 0
qualname = AUTH_DB_AUDIT_LOG

# the SQLAlchemy-engine-dedicated logger
# (useful to examine SQL queries, etc.)
[logger_sqlalchemy_engine]
# `level = DEBUG` - logs SQL queries and results
# `level = INFO` - logs SQL queries only
# `level = WARNING` - logs neither (recommended for production systems)
level = INFO
handlers =
propagate = 1
qualname = sqlalchemy.engine

#
# Handlers

[handler_console]
class = StreamHandler
level = NOTSET
formatter = standard
args = (sys.stderr,)

[handler_dummy]
class = NullHandler
level = INFO

#
# Formatters

[formatter_standard]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s

[formatter_level_time_and_message]
format = [%(levelname) -10s %(asctime)s] %(message)s

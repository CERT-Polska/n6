# Example/prototype of *n6 REST API* server app configuration
# (variant which may be more convenient when it comes to development)
#
# See also:
# * `etc/web/conf/restapi.ini`
#   (may be more convenient when preparing production config...)
# * `N6RestApi` (the related *n6* package's source code)
# * https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html


[app:main]
use = egg:n6restapi

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
    pyramid_debugtoolbar

# By default, the toolbar only appears for clients from IP addresses
# '127.0.0.1' and '::1'.
;debugtoolbar.hosts = 127.0.0.1 ::1


# For development, use may want to enable fake authentication...
;dev_fake_auth = true
;dev_fake_auth.org_id = example.org
;dev_fake_auth.user_id = example@example.org


###
# api key configuration
###

# Setting the following option makes it possible for users to
# authenticate to *n6* REST API (but not to the *n6* Portal's API!)
# with their individual API keys.
#
# The value below is only an example, and -- for security purposes --
# you are strongly advised not to use it in a production environment.
#
# You can generate a safe secret using, for example, this command:
#
#     python -c 'import os, base64; print(base64.b64encode(os.urandom(40), b"-_").decode())'
#
# (then copy the line printed to the console and paste it as the value
# of the following option).
#
# Please note that the value of this option has to be identical in the
# *n6* Portal API's and REST API's configuration files (if not, users
# will be unable to authenticate to *n6* REST API with any API keys
# obtained/generated via *n6* Portal).
#
# *** Remember to provide a **secure** secret ***
# *** value for any production purposes!!!!!!  ***
api_key_based_auth.server_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED


###
# event db configuration
###

# *This option is always required:*
# connection URL, e.g.: mysql+mysqldb://someuser:somepassword@somehostname/some_db_name
# (it must start with `mysql+mysqldb:` (or just `mysql:`) because other dialects/drivers
# are not supported).
#
# *** Remember to configure a **secure** secret ***
# *** password for any production purposes!!!!! ***
sqlalchemy.url = mysql://user:password@localhost/n6

# If you want to use SSL, the following options must be set to
# appropriate file paths...
#
# *** Remember to provide paths to dedicated **secure** ***
# *** certificates + key for any production purposes!!! ***
# *** (*NOT* to these example/demonstration-only ones!) ***
;mysql.api.ssl_cacert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ca-cert-n6-service-ca.pem
;mysql.api.ssl_cert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-cert---n6-service-ca-00000000000000000018.pem
;mysql.api.ssl_key = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-key---n6-service-ca-00000000000000000018.pem

#------------------------------------------------------------------------------
# Enabling SSL on MySQL server (example):
# * execute in the MySQL shell:
#   GRANT ALL PRIVILEGES ON *.* TO 'user'@'%' IDENTIFIED BY 'password' REQUIRE SSL;
#   or
#   GRANT ALL on *.* TO 'user'@'host' REQUIRE
#       SUBJECT '/O=.../...'
#       AND ISSUER '/O=.../...';
# * add SSL configuration to mysql server in file /etc/my.cnf in section [mysqld]:
#   ssl-ca=/home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ca-cert-n6-service-ca.pem
#   ssl-cert=/home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-cert---n6-service-ca-00000000000000000018.pem
#   ssl-key=/home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-key---n6-service-ca-00000000000000000018.pem
#------------------------------------------------------------------------------

# The length, in days, of time windows (aka *steps*) in which separate
# (partial) queries will be performed. We (the authors of *n6*) decided
# to partition queries into narrower *step* queries for performance
# reasons, based on our real-world experience. You may want to adjust
# this option to your needs, preferably based on your own performance
# measurements (if your instance of *n6* does not have to deal with
# large amounts of data in its Event DB, you may even want to get rid
# of that partitioning completely, just by setting this option to a
# sufficiently big value, such as 50000).
day_step = 30
;day_step = 1


###
# auth db configuration
###

# *This option is always required:*
# connection URL, e.g.: mysql+mysqldb://someuser:somepassword@somehostname/some_db_name
# (it must start with `mysql+mysqldb:` (or just `mysql:`) because other dialects/drivers
# are not supported).
#
# *** Remember to configure a **secure** secret ***
# *** password for any production purposes!!!!! ***
auth_db.url = mysql://user:password@localhost/auth_db

# If you want to use SSL, the following options must be set to
# appropriate file paths...
#
# *** Remember to provide paths to dedicated **secure** ***
# *** certificates + key for any production purposes!!! ***
# *** (*NOT* to these example/demonstration-only ones!) ***
;auth_db.ssl_cacert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ca-cert-n6-service-ca.pem
;auth_db.ssl_cert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-cert---n6-service-ca-00000000000000000018.pem
;auth_db.ssl_key = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-key---n6-service-ca-00000000000000000018.pem

# Additional options related to Auth-DB
# (their default values are usually OK!):
#
auth_db_connection_pool.pool_pre_ping = true
auth_db_connection_pool.pool_recycle = 3600
auth_db_connection_pool.pool_timeout = 20
auth_db_connection_pool.pool_size = 15
auth_db_connection_pool.max_overflow = 12
#
# Note: any MySQL (MariaDB) variables specified here as
# `auth_db_session_variables.<variable> = <value>` will
# be set by executing: `SET SESSION <variable> = <value>`.
# WARNING: for simplicity, the variable names and values will
# be inserted into SQL code "as is", *without* any escaping
# (we assume we can treat configuration files as *trusted*).
#
# (`auth_db_session_variables.wait_timeout` should be greater
# than `auth_db_connection_pool.pool_recycle` -- see above...)
auth_db_session_variables.wait_timeout = 7200


###
# auth api prefetching configuration
###

# The following three options' values must be integer numbers. Each of
# them expresses a number of seconds.

# (must not be less than 5)
auth_api_prefetching.max_sleep_between_runs = 12

# (must not be less than 60)
auth_api_prefetching.tolerance_for_outdated = 300

# (must not be less than 0)
auth_api_prefetching.tolerance_for_outdated_on_error = 1200

# The following two options (`auth_api_prefetching.pickle_cache_dir` and
# `auth_api_prefetching.pickle_cache_signature_secret`) are related to
# the *pickle cache* mechanism, which is an optional addition to the
# *Auth API prefetching* machinery, supposed to improve prefetching
# performance (in particular when multiple processes share the same
# *pickle cache* directory). You can enable this optional mechanism by
# setting these two options to non-blank values.
#
# The values of these two options placed below (and commented out) are
# only example ones. In particular, you are -- for security reasons --
# strongly advised not to use in a production environment the example
# value of `auth_api_prefetching.pickle_cache_signature_secret`!
#
# You can generate a safe secret using, for example, this command:
#
#     python -c 'import os, base64; print(base64.b64encode(os.urandom(64), b"-_").decode())'
#
# (then copy the line printed to the console and paste it as the value
# of the following option).

# ***Important:*** our processes need to have *read-and-write* access
# to any files within this directory, including also the possibility to
# create and delete those files. At the same time, on production, they
# should *not* be accessible for any unauthorized users/processes, not
# even just for reading, because some of those files contain (possibly
# sensitive) data from Auth DB (*note:* even though, the integrity of
# the concerned files is verified using a HMAC-like mechanism, they are
# *not* encrypted at all!).
;auth_api_prefetching.pickle_cache_dir = /tmp/n6-auth-api-prefetching-pickle-cache

# ***Important:*** if the following secret is compromised, an attacker
# might be able to tamper with the *pickle* file content (provided they
# also manage to gain write access to that file) -- which would make
# them able not only to modify the authorization stuff *but also* to
# conduct an *arbitrary code execution* attack! (see the warning near
# the beginning of the docs of the standard library `pickle` module...).
#
# *** If this non-required option is ever used, ***
# ***  remember to provide a **secure** secret  ***
# ***  value for any production purposes!!!!!!  ***
;auth_api_prefetching.pickle_cache_signature_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED ON PRODUCTION SYSTEM


###
# dev-or-manual-tests-only server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543


###
# logging configuration
# https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

#
# Declarations

[loggers]
keys = root, auth_db_audit_log, sqlalchemy_engine

[handlers]
keys = console, dummy

[formatters]
keys = standard, level_time_and_message

#
# Loggers

# the top-level (root) logger
# (gathers messages from almost all its sub-loggers...)
[logger_root]
level = INFO
handlers = console

# the Auth-DB-Audit-Log-dedicated logger
# (log messages are JSON-serialized dicts conveying information on
# any changes to Auth DB contents; see `n6lib.auth_db.audit_log`)
[logger_auth_db_audit_log]
level = INFO
handlers = console
propagate = 0
qualname = AUTH_DB_AUDIT_LOG

# the SQLAlchemy-engine-dedicated logger
# (useful to examine SQL queries, etc.)
[logger_sqlalchemy_engine]
# `level = DEBUG` - logs SQL queries and results
# `level = INFO` - logs SQL queries only
# `level = WARNING` - logs neither (recommended for production systems)
level = INFO
handlers =
propagate = 1
qualname = sqlalchemy.engine

#
# Handlers

[handler_console]
class = StreamHandler
level = NOTSET
formatter = standard
args = (sys.stderr,)

[handler_dummy]
class = NullHandler
level = INFO

#
# Formatters

[formatter_standard]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s

[formatter_level_time_and_message]
format = [%(levelname) -10s %(asctime)s] %(message)s

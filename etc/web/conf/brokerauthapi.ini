# Example/prototype of *N6 Broker Auth API* server app configuration
#
# See also:
# * `etc/web/conf/dev/brokerauthapi-development.ini`
#   (may be more convenient for development...)
# * `N6BrokerAuthApi` (the related *n6* package's source code)
# * https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html


[app:main]
use = egg:n6brokerauthapi#main

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =


###
# auth db configuration
###

# *This option is always required:*
# connection URL, e.g.: mysql+mysqldb://someuser:somepassword@somehostname/some_db_name
# (it must start with `mysql+mysqldb:` (or just `mysql:`) because other dialects/drivers
# are not supported).
#
# *** Remember to configure a **secure** secret ***
# *** password for any production purposes!!!!! ***
auth_db.url = mysql://root:password@mysql/auth_db

# If you want to use SSL, the following options must be set to
# appropriate file paths...
#
# *** Remember to provide paths to dedicated **secure** ***
# *** certificates + key for any production purposes!!! ***
# *** (*NOT* to these example/demonstration-only ones!) ***
auth_db.ssl_cacert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ca-cert-n6-service-ca.pem
auth_db.ssl_cert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-cert---n6-service-ca-00000000000000000018.pem
auth_db.ssl_key = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-key---n6-service-ca-00000000000000000018.pem

# Additional options related to Auth-DB
# (their default values are usually OK!):
#
auth_db_connection_pool.pool_pre_ping = true
auth_db_connection_pool.pool_recycle = 3600
auth_db_connection_pool.pool_timeout = 20
auth_db_connection_pool.pool_size = 15
auth_db_connection_pool.max_overflow = 12
#
# Note: any MySQL (MariaDB) variables specified here as
# `auth_db_session_variables.<variable> = <value>` will
# be set by executing: `SET SESSION <variable> = <value>`.
# WARNING: for simplicity, the variable names and values will
# be inserted into SQL code "as is", *without* any escaping
# (we assume we can treat configuration files as *trusted*).
#
# (`auth_db_session_variables.wait_timeout` should be greater
# than `auth_db_connection_pool.pool_recycle` -- see above...)
auth_db_session_variables.wait_timeout = 7200


###
# `n6brokerauthapi`-specific configuration
###

broker_auth_api.auth_manager_maker_class = n6brokerauthapi.auth_stream_api.StreamApiBrokerAuthManagerMaker

# Important: the value of the following option has to be identical
# to the value of the `api_key_based_auth.server_secret` option in
# the *n6* Portal API's configuration. If not, users will be unable to
# authenticate to *n6* Stream API with any API keys obtained/generated
# via *n6* Portal).
#
# Important: the value below is only an example, and -- for security
# purposes -- you are strongly advised not to use it in a production
# environment.
#
# *** Remember to provide a **secure** secret ***
# *** value for any production purposes!!!!!! ***
stream_api_broker_auth.server_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED

# The rest of the
# `n6brokerauthapi.auth_stream_api.StreamApiBrokerAuthManagerMaker`-specific
# configuration (to be uncommented and adjusted if defaults are not sufficient):
;stream_api_broker_auth.push_exchange_name = _push
;stream_api_broker_auth.autogenerated_queue_prefix = stomp


###
# dev-or-manual-tests-only server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543


###
# logging configuration
# https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

#
# Declarations

[loggers]
keys = root, auth_db_audit_log, sqlalchemy_engine

[handlers]
keys = console, file, syslog, dummy
;keys = console, file, syslog, dummy, amqp

[formatters]
keys = standard, cut_notraceback, cut, only_message, time_and_message

#
# Loggers

# the top-level (root) logger
# (gathers messages from almost all its sub-loggers...)
[logger_root]
level = INFO
handlers = console, syslog
;handlers = console, file, syslog, amqp

# the Auth-DB-Audit-Log-dedicated logger
# (log messages are JSON-serialized dicts conveying information on
# any changes to Auth DB contents; see `n6lib.auth_db.audit_log`)
[logger_auth_db_audit_log]
level = INFO
handlers = dummy
;handlers = amqp
propagate = 0
qualname = AUTH_DB_AUDIT_LOG

# the SQLAlchemy-engine-dedicated logger
# (useful to examine SQL queries, etc.)
[logger_sqlalchemy_engine]
# `level = DEBUG` - logs SQL queries and results
# `level = INFO` - logs SQL queries only
# `level = WARNING` - logs neither (recommended for production systems)
level = WARNING
handlers =
propagate = 1
qualname = sqlalchemy.engine

#
# Handlers

[handler_console]
class = StreamHandler
level = INFO
formatter = standard
args = (sys.stderr,)

[handler_file]
class = FileHandler
level = NOTSET
formatter = cut
args = ('/home/dataman/logs/log_n6_all',)

[handler_syslog]
class = handlers.SysLogHandler
level = ERROR
formatter = cut_notraceback
args = ('/dev/log',)

[handler_dummy]
class = NullHandler
level = INFO

;[handler_amqp]
;class = n6lib.log_helpers.AMQPHandler
;level = INFO
# * AMQPHandler's `args` in the variant for
#   client-certificate-based authentication:
;args = (
;    {
;        'host': 'some-host-of-rabbitmq',
;        'port': 5671,
;        'ssl': True,
;        'ssl_ca_certs': '/some/path/to/CACertificatesFile.pem',
;        'ssl_certfile': '/some/path/to/ClientCertificateFile.pem',
;        'ssl_keyfile': '/some/path/to/private/ClientCertificateKeyFile.pem',
;    },
;    'logging',
;    {'exchange_type': 'topic', 'durable': True})
# * AMQPHandler's `args` in the variant for
#   username+password-based authentication:
;args = (
;    {
;        'host': 'some-host-of-rabbitmq',
;        'port': 5671,
;        'ssl': True,
;        'ssl_ca_certs': '/some/path/to/CACertificatesFile.pem',
;        'password_auth': True,
;        'username': '<some username>',
;        'password': '<some password -- at least 16 characters long>',
;    },
;    'logging',
;    {'exchange_type': 'topic', 'durable': True})
# ^
# Note: for a handler whose `class` is n6lib.log_helpers.AMQPHandler, the value of
# `args` is expected to be a Python tuple:
#
#    (<connection settings>, <exchange name>, <rest kwargs for exchange_declare()>)
#
# -- where <connection settings> should be:
#
#   a dict -- containing the AMQP connection settings being just **kwargs ready to
#   be passed to `n6lib.amqp_helpers.get_amqp_connection_params_dict_from_args()`
#   (see the signature and implementation of that function...)
#
#   [or alternatively -- if we say about the *legacy format* which is *deprecated*
#   and *should be avoided*: a dict ready to be passed directly to the constructor
#   `n6lib.amqp_getters_pushers.AMQPThreadedPusher` as the `connection_params_dict`
#   keyword argument...]

#
# Formatters

[formatter_standard]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s

# brief information: no tracebacks, messages no longer than ~2k
[formatter_cut_notraceback]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

# semi-brief information: with tracebacks but messages no longer than: ~2k + traceback length
[formatter_cut]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s
class = n6lib.log_helpers.CutFormatter

[formatter_only_message]
format = %(message)s

[formatter_time_and_message]
format = [%(asctime)s] %(message)s

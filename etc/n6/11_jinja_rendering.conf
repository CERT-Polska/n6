### NOTE: so far, the *jinja-template-based-renderer* and *mail
### notices/*mail sending API* features are *not* used by any of
### the components provided by `N6DataPipeline` or `N6DataSources`
### (*contrary* to web components, such as *n6 Portal* and *n6 Admin
### Panel*). So, unless you make use of some of those features in your
### custom pipeline component, you can ignore this file.




[jinja_template_based_renderer]
############################################################################
# This configuration section is needed only if the `from_predefined()`     #
# constructor provided by `n6lib.jinja_helpers.JinjaTemplateBasedRenderer` #
# is used (note: this is also the case when `MailNoticesAPI` from the      #
# `n6lib.mail_notices_api` module and/or `MailMessageBuilder` from the     #
# `n6lib.mail_sending_api` module are in use). Other constructors provided #
# by `JinjaTemplateBasedRenderer` do not need any configuration at all.    #
############################################################################

# The value of the following option should consist of (one or
# more) comma-separated template locations that will be tried,
# in the specified order, by Jinja template loaders when
# searching for templates.
#
# Each of these locations should be:
#
# * An *absolute* path of a directory (aka folder); if it makes
#   use of a tilde-based home directory placeholder prefix, such
#   as `~` or `~username`, the placeholder will be automatically
#   expanded.
#   Examples:
#     /etc/n6/templates
#     ~/my-own-n6-stuff/jinja-related
#     ~dataman/.n6/our-custom-fancy-templates
#
# *OR*
#
# * A specification in the following format:
#     @<package name>:<package subdirectory path>
#   where:
#      * <package name> is a Python package name
#        (see also: the docs of the `jinja2.PackageLoader`'s
#        parameter `package_name`);
#      * <package subdirectory path> is a *relative* path of
#        a directory (folder) in that package's source tree
#        (see also: the docs of the `jinja2.PackageLoader`'s
#        parameter `package_path`).
#   Examples:
#     @n6lib:data/templates
#     @my.own.package:some-dir/sub-dir/sub-sub-dir
template_locations = ~/.n6/templates, @n6datapipeline:data/templates, @n6lib:data/templates

# The default value ("utf-8") of the following option, should be
# OK in nearly all cases.
;template_encoding = utf-8

# The following option is relevant *only* to template locations
# specified as absolute paths of directories (*not* to those in
# the `@<package name>:<package subdirectory path>` format).
;follow_symlinks = False

# The value of the following option should consist of (zero or
# more) comma-separated *import names* of Jinja extensions (see:
# https://jinja.palletsprojects.com/extensions/). Typically, it
# should contain, at the minimum, the "jinja2.ext.do" name -- at
# least, as long as any of the default templates (those bundled
# with *n6*) are in use.
;jinja_extensions = jinja2.ext.do

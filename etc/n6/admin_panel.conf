# Relevant to the *n6 Admin Panel* server app.
#
# A copy should be placed in `~/.n6/` (or `/etc/n6/`) and adjusted as necessary.


#=======================================================================


[admin_panel]

# The value of the `app_secret_key` option should be set to some
# unpredictable secret; you can generate it with the command:
#   python -c 'import secrets; print(secrets.token_urlsafe())'
# (note: *if this option is left blank* then a new app secret will be
# generated automatically *each time* the Admin Panel app is started;
# then the validity of CSRF tokens and of any other client-session-based
# stuff will *never* survive a restart of the app).
;app_secret_key =


# You may also want to customize the following security-related options
# (please, do it carefully; note that the defaults are quite reasonable).

# (true => (1) *Secure* session cookie; (2) error if request is not HTTPS)
;require_secure_communication = true

# (the default value of this option should be OK in most cases)
;session_cookie_name = n6_admin_panel_session

# (empty => use Flask's APPLICATION_ROOT; it defaults to '/')
;session_cookie_path =

# (no => SameSite=Lax; yes => SameSite=Strict)
;session_cookie_samesite_strict = no

# (Note that, when it comes to security, even though currently there
# is no authentication/authorization mechanism in the Admin Panel
# application, client sessions are still important -- because the
# CSRF protection mechanism depends on them.)


# Baddomains API client options
# Make the client active and fill the other options only if you have
# an access to the Baddomains API.

is_baddomains_client_active = no
baddomains_api_base_url =
baddomains_username =
baddomains_password =
baddomains_auth_token_audience = ; from auth token `aud` value
baddomains_auth_token_cache_dir =


#-----------------------------------------------------------------------


[auth_db]

# connection URL, e.g.: mysql+mysqldb://someuser:somepassword@somehostname/some_db_name
# it must start with `mysql+mysqldb:` (or just `mysql:`) because other dialects/drivers
# are not supported
# (see also: https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls)
url = mysql://root:password@mysql/auth_db

# if you want to use SSL, the following options must be set to
# appropriate file paths...
ssl_cacert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ca-cert-n6-service-ca.pem
ssl_cert = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-cert---n6-service-ca-00000000000000000018.pem
ssl_key = /home/dataman/n6/N6Lib/n6lib/tests/certs_and_requests_for_testing/ads-adm-key---n6-service-ca-00000000000000000018.pem


[auth_db_connection_pool]

# (generally, the defaults should be OK in most cases; if you are
# interested in technical details -- see: SQLAlchemy docs...)
pool_pre_ping = true
pool_recycle = 3600
pool_timeout = 20
pool_size = 15
max_overflow = 12


[auth_db_session_variables]

# any MySQL (MariaDB) variables specified within this section will be
# set by executing "SET SESSION <variable> = <value>". WARNING: for
# simplicity, the variable names and values will be inserted into SQL
# code "as is", *without* any escaping (we assume that we can treat
# configuration files as *trusted*).

# (`[auth_db_session_variables].wait_timeout` should be greater than
# `[auth_db_connection_pool].pool_recycle` -- see above...)
wait_timeout = 7200


#-----------------------------------------------------------------------


# Note: for *n6 Admin Panel*, these RabbitMQ connection settings are
# necessary **only** if the AMQP logging handler is configured in your
# `logging.conf` configuration file (typically in its `[handler_amqp]`
# section) with `<connection settings>` being None (see the relevant
# comment in `etc/n6/logging.conf`...).


[rabbitmq]

# The RabbitMQ server location:
host = rabbit   ; hostname or IP address
port = 5671     ; port number

# If you want to secure the connections to the RabbitMQ server with
# SSL (TLS), which is *highly recommended* (at least on production
# systems!), you need to:
# * set the `ssl` option to true; and
# * set the `ssl_ca_certs` option to the CA certificate(s) file path
#   (to be used to verify the RabbitMQ server's certificate).
ssl = true
ssl_ca_certs = ~/certs/n6-CA/cacert.pem

# It is possible to use SSL (TLS) *also* for client-certificate-based
# authentication. To ensure that, you need to:
# * set `ssl` and `ssl_ca_certs` as appropriate (see above...); and
# * specify the client certificate file path and that certificate's
#   private key file path, by setting the following `ssl_certfile`
#   and `ssl_keyfile` options to appropriate paths; and
# * ensure that `password_auth` (see below...) is commented out or
#   explicitly set to false.
ssl_certfile = ~/certs/cert.pem
ssl_keyfile = ~/certs/key.pem

# If you prefer username-and-password-based authentication (rather
# than client-certificate-based), you need to:
# * set `password_auth` to true; and
# * set `username` and `password` to appropriate credentials.
# (Note: if `password_auth` is true and `username` is set to a non-empty
# value other than guest, `password` needs to be set to a secret password
# being at least 16 characters long.)
;password_auth = false
;username =
;password =

# The AMQP heartbeat interval:
heartbeat_interval = 30


#-----------------------------------------------------------------------


# Note: the *mail notices* feature engages the 3 configuration sections:
#
# * the `[mail_notices_api]` section (see below)
#   -- directly related to `MailNoticesAPI` from `n6lib.mail_notices_api`,
#
# * the `[mail_sending_api]` section (see below)
#   -- directly related to `MailSendingAPI` from `n6lib.mail_sending_api`,
#
# * the `[jinja_template_based_renderer]` section (see below)
#   -- directly related to `JinjaTemplateBasedRenderer.from_predefined()`
#      from `n6lib.jinja_helpers`.


[mail_notices_api]

# Should mail notices be dispatched at all? If this option is
# false then any invocations of a dispatcher obtained from a
# context manager returned by the `MailNoticesAPI.dispatcher()`
# method do nothing, and *no* other options from this section or
# from the `[mail_sending_api]`/`[jinja_template_based_renderer]`
# sections (which normally are also engaged) are used by the
# `MailNoticesAPI` stuff.
active = true
;active = false

# The value of the following option, if not being empty, should
# be a Python dict literal representing a dict that maps *notice
# keys* (str, e.g.: 'org_config_update_requested') to dicts that
# map 2-character codes of a supported *language* (such as 'EN'
# or 'PL) to dicts specifying the following mail components:
# *body*, *subject*, *sender* and (optionally) *misc headers*
# (which stands for *miscellaneous mail headers*).
#
# Lack of a certain *notice key* means that the mail notices
# stuff is not active for that *notice key* (meaning that any
# invocations of a dispatcher obtained from a context manager
# returned by any `MailNoticesAPI.dispatcher(<that notice key>)`
# call do nothing).
#
# Each of the *mail components* dicts (i.e., the dicts mentioned
# above as those specifying mail components) contains some or
# all of the following items:
#
# * 'body' -- a *string value* (required),
#
# * 'subject' -- a *string value* (required),
#
# * 'sender' -- a *string value* (required if the value of
#   the `default_sender` option [see below] is left empty,
#   otherwise optional),
#
# * 'misc_headers' -- a dict that maps any mail header names
#   to their values, specified as *string values* (optional);
#
# **Important note:** each of the *string values* mentioned
# above shall be a string which is:
#
# * (1) **either** a Jinja template name preceded with a `$:`
#   (*dollar sign* followed by *colon*) marker,
#
# * (2) **or** any other string -- which *literally* specifies
#   the item's value (**no HTML/XML escaping** will be applied
#   to it!).
#
# Ad (1): those Jinja templates will be used by an instance of
# `JinjaTemplateBasedRenderer` (see `n6lib.jinja_helpers` and
# the `[jinja_template_based_renderer]` config section) as the
# basis for rendering of actual values -- with the *rendering
# context* containing the `data_dict` variable being a deep copy
# of the `notice_data` dict passed in to the dispatcher [where
# *dispatcher* is a callable object obtained as the `as` target
# (`__enter__()`'s return value) of a context manager returned
# by `MailNoticesAPI.dispatcher()`].
#
# **Beware** that HTML/XML escaping will be applied **only if**
# the template name has a `.html`, `.htm` or `.xml` suffix
# (checked in a case-insensitive manner).
#
# For example templates -- see the template files in the
# `data/templates` subdirectory of the `n6lib` package source
# tree.
#
# The default value of this option seems to be quite sensible
# for most important use cases. The basic versions of the
# Jinja templates it refers to are already defined in the
# `data/templates` subdirectory of the `n6lib` package; note:
# you can customize them by creating your own template files --
# named the same but placed in (an)other location(s) (specified
# with the `template_locations` configuration option in the
# section `[jinja_template_based_renderer]`).
;notice_key_to_lang_to_mail_components =
;    {
;        'mfa_config_erased': {
;            'EN': {
;                'subject':
;                    'Deleted configuration of multi-factor authentication',
;                'body': '$:mail_notice__mfa_config_erased__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    u'Usuni\u0119ta konfiguracja uwierzytelniania wielosk\u0142adnikowego',
;                'body': '$:mail_notice__mfa_config_erased__PL.txt',
;            },
;        },
;
;        'new_org_and_user_created': {
;            'EN': {
;                'subject':
;                    'Welcome to the n6 system',
;                'body': '$:mail_notice__new_org_and_user_created__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    u'Witamy w systemie n6',
;                'body': '$:mail_notice__new_org_and_user_created__PL.txt',
;            },
;        },
;
;        'org_config_update_applied': {
;            'EN': {
;                'subject':
;                    'Acceptance of the requested update of the organization configuration',
;                'body': '$:mail_notice__org_config_update_applied__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    'Akceptacja zmian w konfiguracji Twojej organizacji',
;                'body': '$:mail_notice__org_config_update_applied__PL.txt',
;            },
;        },
;        'org_config_update_rejected': {
;            'EN': {
;                'subject':
;                    'Rejection of the requested update of the organization configuration',
;                'body': '$:mail_notice__org_config_update_rejected__EN.txt',
;            },
;            'PL': {
;                'subject':
;                    'Odmowa wprowadzenia zmian w konfiguracji Twojej organizacji',
;                'body': '$:mail_notice__org_config_update_rejected__PL.txt',
;            },
;        },
;    }

# The following option specifies (using a 2-character string)
# the *default language* -- to be used when *neither* of the
# `MailNoticesAPI.dispatcher()` and `<the obtained dispatcher>()`
# invocations has included the `lang` argument (specifying the
# desired mail notice language variant); but also when it has
# been included but its value is missing from the *notice key*-
# specific subdict of the `notice_key_to_lang_to_mail_components`
# dict (see its description above).
;default_lang = EN

# The value of the following option, if not left empty, should
# be a text to be used as the default value of the 'sender'
# item of subdicts that define mail components (see the above
# description of the `notice_key_to_lang_to_mail_components`
# option; the remarks about `$:`-prepended *template names*
# and HTML/XML escaping apply also here).
default_sender = n6notices@example.org

# The value of the following option, if not left empty, should
# be a Python dict literal that defines additional mail headers,
# to be used to complement (but never overwrite) the items of
# each 'misc_headers' dict (ad 'misc_headers` -- see the above
# description of the `notice_key_to_lang_to_mail_components`
# option; the remarks about `$:`-prepended *template names* and
# HTML/XML escaping apply also here).
;common_misc_headers =


[mail_sending_api]

smtp_host = mailhog
;smtp_host = some-smtp-server.example.org

smtp_port = 1025
;smtp_port = 25

;smtp_login =

;smtp_password =


[jinja_template_based_renderer]
############################################################################
# This configuration section is needed only if the `from_predefined()`     #
# constructor provided by `n6lib.jinja_helpers.JinjaTemplateBasedRenderer` #
# is used (note: this is also the case when `MailNoticesAPI` from the      #
# `n6lib.mail_notices_api` module and/or `MailMessageBuilder` from the     #
# `n6lib.mail_sending_api` module are in use). Other constructors provided #
# by `JinjaTemplateBasedRenderer` do not need any configuration at all.    #
############################################################################

# The value of the following option should consist of (one or
# more) comma-separated template locations that will be tried,
# in the specified order, by Jinja template loaders when
# searching for templates.
#
# Each of these locations should be:
#
# * An *absolute* path of a directory (aka folder); if it makes
#   use of a tilde-based home directory placeholder prefix, such
#   as `~` or `~username`, the placeholder will be automatically
#   expanded.
#   Examples:
#     /etc/n6/templates
#     ~/my-own-n6-stuff/jinja-related
#     ~dataman/.n6/our-custom-fancy-templates
#
# *OR*
#
# * A specification in the following format:
#     @<package name>:<package subdirectory path>
#   where:
#      * <package name> is a Python package name
#        (see also: the docs of the `jinja2.PackageLoader`'s
#        parameter `package_name`);
#      * <package subdirectory path> is a *relative* path of
#        a directory (folder) in that package's source tree
#        (see also: the docs of the `jinja2.PackageLoader`'s
#        parameter `package_path`).
#   Examples:
#     @n6lib:data/templates
#     @my.own.package:some-dir/sub-dir/sub-sub-dir
template_locations = @n6lib:data/templates

# The default value ("utf-8") of the following option, should be
# OK in nearly all cases.
;template_encoding = utf-8

# The following option is relevant *only* to template locations
# specified as absolute paths of directories (*not* to those in
# the `@<package name>:<package subdirectory path>` format).
;follow_symlinks = False

# The value of the following option should consist of (zero or
# more) comma-separated *import names* of Jinja extensions (see:
# https://jinja.palletsprojects.com/extensions/). Typically, it
# should contain, at the minimum, the "jinja2.ext.do" name -- at
# least, as long as any of the default templates (those bundled
# with *n6*) are in use.
;jinja_extensions = jinja2.ext.do

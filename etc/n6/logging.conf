# Relevant to most components provided by `N6DataPipeline` and `N6DataSources`
# as well as to the *n6 Admin Panel* (`N6AdminPanel`), and possibly to other
# components/scripts...
#
# A copy should be placed in `~/.n6/` (or `/etc/n6/`) and adjusted as necessary.


# See: https://docs.python.org/library/logging.config.html#configuration-file-format

#
# Declarations

[loggers]
keys = root, auth_db_audit_log, nonstandard_names

[handlers]
keys = console, file, syslog, dummy
;keys = console, file, syslog, dummy, amqp

[formatters]
keys = standard, cut_notraceback, cut, syslog_dedicated

#
# Loggers

# the top-level (root) logger
# (gathers messages from almost all its sub-loggers...)
[logger_root]
level = INFO
handlers = file, syslog
;handlers = console, file, syslog, amqp

# the Auth-DB-Audit-Log-dedicated logger
# (log messages are JSON-serialized dicts conveying information on
# any changes to Auth DB contents; see `n6lib.auth_db.audit_log`)
[logger_auth_db_audit_log]
level = INFO
handlers = dummy
;handlers = amqp
propagate = 0
qualname = AUTH_DB_AUDIT_LOG

# the parent logger for *non-standard-names-dedicated*
# loggers -- each named according to the pattern:
# 'NONSTANDARD_NAMES.<event category name>';
# parser components use these loggers to report any
# non-standard values of the `name` attribute of events
# (see: n6lib.const.CATEGORY_TO_NORMALIZED_NAME)
[logger_nonstandard_names]
level = INFO
handlers = dummy
;handlers = amqp
propagate = 0
qualname = NONSTANDARD_NAMES

#
# Handlers

[handler_console]
class = StreamHandler
level = INFO
formatter = standard
args = (sys.stderr,)

[handler_file]
class = FileHandler
level = NOTSET
formatter = cut
args = ('/home/dataman/logs/log_n6_all',)

[handler_syslog]
class = n6lib.log_helpers.N6SysLogHandler
level = ERROR
formatter = syslog_dedicated
args = ('/dev/log',)

[handler_dummy]
class = NullHandler
level = INFO

;[handler_amqp]
;class = n6lib.log_helpers.AMQPHandler
;level = INFO
;args = (None, 'logging', {'exchange_type': 'topic', 'durable': True})
# ^
# Note: for a handler whose `class` is n6lib.log_helpers.AMQPHandler, the value of
# `args` is expected to be a Python tuple:
#
#    (<connection settings>, <exchange name>, <rest kwargs for exchange_declare()>)
#
# -- where <connection settings> should be one of:
#
#   * None -- then the AMQP connection settings will be taken from the global config
#     section `[rabbitmq]`, see: `etc/n6/00_global.conf` or `etc/n6/admin_panel.conf`
#     (but note that this possibility is *not* available for N6Portal, N6RestApi and
#     N6BrokerAuthApi)
#
#   * a dict -- containing the AMQP connection settings being just **kwargs ready to
#     be passed to `n6lib.amqp_helpers.get_amqp_connection_params_dict_from_args()`
#     (see the signature and implementation of that function...)
#
#     [or alternatively -- if we say about the *legacy format* which is *deprecated*
#     and *should be avoided*: a dict ready to be passed directly to the constructor
#     `n6lib.amqp_getters_pushers.AMQPThreadedPusher` as the `connection_params_dict`
#     keyword argument...]

#
# Formatters

[formatter_standard]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s

# brief information: no tracebacks, messages no longer than ~2k
[formatter_cut_notraceback]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

# semi-brief information: with tracebacks but messages no longer than: ~2k + traceback length
[formatter_cut]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.CutFormatter

# same as `formatter_cut_notraceback` but with N6SysLogHandler's `script_basename` field included
[formatter_syslog_dedicated]
format = n6: %(levelname) -10s %(asctime)s %(script_basename)s, %(name)s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

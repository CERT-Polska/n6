# * Collectors

# Note: when running the `n6collector_misp` script, you
# specify the config section name as the sole positional
# command-line argument.
#
# So you can have, in you config file(s), any number of
# configurations of the `n6collector_misp` script -- each
# in a separate config section of a distinct name. Then
# multiple instances of `n6collector_misp` can be run in
# parallel without any problem, provided that their
# `source_provider` values differ.
#
# Here, for example, we configure the misp.circl.lu MISP source:

[misp_circl]

# The 1st segment of the source identifier (the 2nd is always `misp`).
source_provider = circl-lu

# The MISP API's base URL.
misp_url = https://misp.circl.lu/

# Your individual MISP API key.
# See: https://www.circl.lu/services/misp-malware-information-sharing-platform/
# (after registration, the MISP API key can be found on the MISP web interface
# in the *automation* section).
misp_key = SET THIS OPTION TO YOUR ACTUAL API KEY IN YOUR CONFIG

# Should the MISP API's SSL certificate be verified?
;misp_verifycert = yes     ; <- The default value (yes) is recommended.

# How far do we want to reach into the past when the collector is run
# for the first time? (in days)
days_for_first_run = 15

# The minimum TLP, so no event will have assigned a TLP below this value.
# If not left empty, it must be one of: WHITE, GREEN, AMBER, RED (matched
# in a case-insensitive manner).
;minimum_tlp =

# ----------------------------------------------------------------------
# Note: the following four options concern only downloading samples'
# binary data. If the defaults are not appropriate, uncomment and
# customize these options in your configuration file.

# The URL path specifying the location of MISP attribute files (to be
# joined to the value of `misp_url`, together with sample identifiers,
# to form URLs from which binary samples will be downloaded).
;sample_path = /attributes/downloadAttachment/download/

# When a retryable download failure occurs for a sample, how many
# extra attempts to download it are allowed to be made (each after
# a few-seconds delay).
;download_retries = 3

# A Python dict literal specifying custom headers for all sample
# download requests (note, however, that the `Authorization` header
# will always, automatically, be set to the value of the `misp_key`
# option).
;base_request_headers = {}

# After what time (in days) the lack of any sample download success
# (when there is anything to download) should become fatal (that is,
# should cause that execution of the collector script finishes with a
# non-zero exit code).
;max_acceptable_days_of_continuous_download_failures = 3
# ----------------------------------------------------------------------

# The default value of the following option should be OK in most cases
# (you may want to try increasing it in your configuration file if there
# are problems with AMQP connection timeouts...).
;heartbeat_interval = 60

# A standard collector-state-loading-and-saving-related setting;
# its default value value should be OK in nearly all cases.
;state_dir = ~/.n6state



# * Parser

# Note: one common instance of the `n6parser_misp` script should be OK.

[MispParser]

prefetch_count = 20

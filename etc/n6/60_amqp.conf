# Note: when running an instance of the `n6collector_amqp` component
# (provided by `N6DataSources)`, you specify the config section name
# as the sole positional command-line argument.
#
# So you can have, in your config file(s) in `~/.n6/` (and/or `/etc/n6`),
# any number of configurations for the `n6collector_amqp` component --
# each in a separate config section of a distinct name. Then it will
# even be possible to run multiple instances of `n6collector_amqp` in
# parallel -- as they are able to work independently of each other,
# *provided that* each has a different value of the `input_queue_name`
# option, and (to avoid duplication of work and output data) uses
# different *binding keys* (if applicable; see the options and comments
# below...).


[amqp_collector_example_config_section_name]

source_provider = example-provider   ; 1st segment of the data source identifier
source_channel = example-channel     ; 2nd segment of the data source identifier

# Collector's-input-dedicated connection to RabbitMQ:

input_host = rabbit   ; RabbitMQ server's hostname or IP address
input_port = 5671     ; RabbitMQ server's port number
input_heartbeat_interval = 30   ; AMQP heartbeat interval

# If you want to secure the connections to the RabbitMQ server with
# SSL (TLS), which is *highly recommended* (at least on production
# systems!), you need to:
# * set the `input_ssl` option to true; and
# * set the `input_ssl_ca_certs` option to the CA certificate(s) file
#   path (to be used to verify the RabbitMQ server's certificate).
input_ssl = true
input_ssl_ca_certs = ~/certs/n6-CA/cacert.pem

# It is possible to use SSL (TLS) *also* for client-certificate-based
# authentication. To ensure that, you need to:
# * set `input_ssl` and `input_ssl_ca_certs` as appropriate (see
#   above...); and
# * specify the client certificate file path and that certificate's
#   private key file path, by setting the following `input_ssl_certfile`
#   and `input_ssl_keyfile` options to appropriate values; and
# * ensure that `input_password_auth` (see below...) is commented out or
#   explicitly set to false.
input_ssl_certfile = ~/certs/cert.pem
input_ssl_keyfile = ~/certs/key.pem

# If you prefer username-and-password-based authentication (rather
# than client-certificate-based), you need to:
# * set `input_password_auth` to true; and
# * set `input_username` and `input_password` to appropriate credentials.
# (Note: if `input_password_auth` is true and `input_username` is set to
# a non-empty value other than guest, `input_password` needs to be set to
# a secret password being at least 16 characters long.)
;input_password_auth = false
;input_username =
;input_password =

# Collector's-input-data-related RabbitMQ exchanges and queues:

# The name of the AMQP input queue (must always be specified):
input_queue_name = example-input-amqp-queue

# Note: if you set `input_queue_exchange` to an empty string,
# then the collector itself will neither declare the input
# exchange nor do any bindings (in that case, the values of
# `input_queue_exchange_type` and `input_queue_binding_keys`
# will be just ignored).
input_queue_exchange = example-input-amqp-exchange
input_queue_exchange_type = topic

# Note: if `input_queue_exchange` (see above) is not empty but
# the value of following option specifies no binding keys, then
# the collector will bind the input queue to the input exchange
# *without* any binding key (that makes sense for certain types
# of exchanges).
input_queue_binding_keys = example.binding-key

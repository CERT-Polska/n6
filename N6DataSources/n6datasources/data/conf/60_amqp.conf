# Note: when running the `n6collector_amqp` script, you
# specify the config section name as the sole positional
# command-line argument.
#
# So you can have, in you config file(s), any number of
# configurations of the `n6collector_amqp` script -- each
# in a separate config section of a distinct name. Then
# it will even be possible to run multiple instances of
# `n6collector_amqp` in parallel -- as they are able to
# work independently of each other, *provided that* each
# has a different value of the `input_queue_name` option,
# and (to avoid duplication of work and output data) uses
# different *binding keys* (if applicable; see the options
# and comments below...).

[amqp_collector_example_config_section_name]

source_provider = example-provider
source_channel = example-channel

input_host = rabbit
input_port = 5671
input_heartbeat_interval = 30

input_ssl = 1
input_ssl_ca_certs = ~/certs/n6-CA/cacert.pem
input_ssl_certfile = ~/certs/cert.pem
input_ssl_keyfile = ~/certs/key.pem

input_queue_name = example-input-amqp-queue

# Note: if you set `input_queue_exchange` to an empty string,
# then the collector itself will neither declare the input
# exchange nor do any bindings (in that case, the values of
# `input_queue_exchange_type` and `input_queue_binding_keys`
# will be just ignored).
input_queue_exchange = example-input-amqp-exchange
input_queue_exchange_type = topic

# Note: if `input_queue_exchange` (see above) is not empty but
# the value of following option specifies no binding keys, then
# the collector will bind the input queue to the input exchange
# *without* any binding key (that makes sense for certain types
# of exchanges).
input_queue_binding_keys = example.binding-key

# Copyright (c) 2014-2023 NASK. All rights reserved.

import datetime
import unittest

from n6datasources.parsers.base import BlackListParser
from n6datasources.parsers.malwarepatrol import MalwarepatrolMalurl201406Parser
from n6datasources.tests.parsers._parser_test_mixin import ParserTestMixin
from n6lib.datetime_helpers import parse_iso_datetime_to_utc
from n6lib.record_dict import BLRecordDict


class TestMalwarepatrolMalurl201406Parser(ParserTestMixin, unittest.TestCase):

    RECORD_DICT_CLASS = BLRecordDict

    PARSER_SOURCE = 'malwarepatrol.malurl'
    PARSER_CLASS = MalwarepatrolMalurl201406Parser
    PARSER_BASE_CLASS = BlackListParser
    PARSER_CONSTANT_ITEMS = {
        'restriction': 'public',
        'confidence': 'low',
        'category': 'malurl',
    }
    message_expires = str(parse_iso_datetime_to_utc(ParserTestMixin.message_created) +
                          datetime.timedelta(days=2))

    def cases(self):
        yield (
            b'[Adblock]\n'
            b'https://1.1.1.1:1111\n'
            b'https://2.2.2.2:2222\n'
            b'https://3.3.3.3:3333\n'
            b'https://example4.com'
            ,
            [
                dict(
                    self.get_bl_items(1, 4),
                    url='https://1.1.1.1:1111',
                    time=self.message_created,
                    expires=self.message_expires,
                ),
                dict(
                    self.get_bl_items(2, 4),
                    url='https://2.2.2.2:2222',
                    time=self.message_created,
                    expires=self.message_expires,
                ),
                dict(
                    self.get_bl_items(3, 4),
                    url='https://3.3.3.3:3333',
                    time=self.message_created,
                    expires=self.message_expires,
                ),
                dict(
                    self.get_bl_items(4, 4),
                    url='https://example4.com',
                    time=self.message_created,
                    expires=self.message_expires,
                ),
            ]
        )

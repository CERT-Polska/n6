# Copyright (c) 2020-2025 NASK. All rights reserved.

import locale
import os

# Let's trigger the `n6sdk`-provided monkey-patching
# (if any and if not triggered yet).
import n6sdk                                                                   # noqa

from n6lib.config import monkey_patch_configparser_to_provide_some_legacy_defaults
from n6lib.log_helpers import early_Formatter_class_monkeypatching

# Ensure that locale is set to 'C.UTF-8' (or a custom one if you decide
# to enforce it by setting the `N6_FORCE_LOCALE` environment variable;
# but first please read the notes below).
#
# Note:
#
# * The code of *n6* assumes that the locale settings affecting parsing
#   and formatting of date/time elements (for example, abbreviations of
#   month or week day names...) are C-locale-compliant. So it is
#   **important** that even if you decide to enforce your custom locale
#   (with the `N6_FORCE_LOCALE` environment variable) it **needs to be
#   C-locale-compliant in terms of date/time parsing and formatting!**
#
# * The code of *n6* may assume that the locale settings affecting I/O
#   encoding are UTF-8-compatible (that's why, by default, we employ
#   here 'C.UTF-8' and not bare 'C'). So it is **important** that
#   even if you decide to enforce your custom locale (with the
#   `N6_FORCE_LOCALE` environment variable) it **needs to be a
#   UTF-8-encoding-based one!**
locale_setting = os.environ.get('N6_FORCE_LOCALE') or 'C.UTF-8'
locale.setlocale(locale.LC_ALL, locale_setting)

# Monkey-patch logging.Formatter to use UTC time.
early_Formatter_class_monkeypatching()

# Monkey-patch configparser.RawConfigParser (with its subclasses)...
monkey_patch_configparser_to_provide_some_legacy_defaults()

# Make output diffs generated by `unittest`'s stuff more readable.
import unittest                                                                # noqa
import unittest.util
unittest.TestCase.maxDiff = None
if getattr(unittest.util, '_MAX_LENGTH', None) == 80:  # (<- let's be conservative here)
    # Let's get rid of annoying `...[123 chars]...`-like shortening:
    unittest.util._MAX_LENGTH = 1_000_000

# XXX: This is a temporary workaround for `Python >= 3.11` --
#      to make certain old dependencies happy. But, ultimately,
#      we need to update (or get rid of) those dependencies!
import sys
if sys.version_info[:2] >= (3, 11):
    import collections, collections.abc                                        # noqa
    for _name in ['Container', 'Hashable', 'Iterable', 'Iterator',
                  'Reversible', 'Generator', 'Sized', 'Callable',
                  'Collection', 'Sequence', 'MutableSequence', 'ByteString',
                  'Set', 'MutableSet', 'Mapping', 'MutableMapping',
                  'MappingView', 'ItemsView', 'KeysView', 'ValuesView',
                  'Awaitable', 'Coroutine', 'AsyncIterable',
                  'AsyncIterator', 'AsyncGenerator']:
        if not hasattr(collections, _name):
            setattr(collections, _name, getattr(collections.abc, _name))

# XXX: This is a temporary workaround for `SQLAlchemy 1.3` -- to avoid
#      cluttering stderr with annoying warnings from `libmysqlclient`...
#      See:
#      * https://github.com/sqlalchemy/sqlalchemy/discussions/10489
#      * https://github.com/PyMySQL/mysqlclient/discussions/651#discussioncomment-7308971
#      * https://github.com/PyMySQL/mysqlclient/blob/v1.4.6/MySQLdb/_mysql.c#L1745-L1751
#      Note that the problem has been fixed in sufficiently new releases
#      within all newer SQLAlchemy branches (`1.4` and `2.*`), therefore
#      we'll be able to get rid of this ugly monkey-patching as soon as
#      we upgrade SQLAlchemy (hopefully, soon...).
import functools
from sqlalchemy.dialects.mysql import mysqldb
@functools.wraps(mysqldb.MySQLDialect_mysqldb.do_ping)
def do_ping(self, dbapi_connection):
    try:
        # dbapi_connection.ping(False)
        dbapi_connection.ping()  # <- removed the argument
    except self.dbapi.Error as err:
        if self.is_disconnect(err, dbapi_connection, None):
            return False
        else:
            raise
    else:
        return True
mysqldb.MySQLDialect_mysqldb.do_ping = do_ping

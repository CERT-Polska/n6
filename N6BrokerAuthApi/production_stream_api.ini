###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html
###

[app:main]
use = egg:n6brokerauthapi#main

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =


###
# auth db configuration
###

# connection URL, e.g.: mysql+mysqldb://n6:somepassword@localhost/n6
# it must start with `mysql+mysqldb:` (or just `mysql:`) because other
# dialects/drivers are not supported
auth_db.url = mysql://user:password@host/dbname

# if you want to use SSL, the following options must be set to
# appropriate file paths:
auth_db.ssl_cacert = /some/path/to/CACertificatesFile.pem
auth_db.ssl_cert = /some/path/to/ClientCertificateFile.pem
auth_db.ssl_key = /some/path/to/private/ClientCertificateKeyFile.pem


###
# `n6brokerauthapi`-specific configuration
###

broker_auth_api.auth_manager_maker_class = n6brokerauthapi.auth_stream_api.StreamApiBrokerAuthManagerMaker

# Important: the value of the following option has to be identical
# to the value of the `api_key_based_auth.server_secret` option in
# the *n6* Portal API's configuration. If not, users will be unable to
# authenticate to *n6* Stream API with any API keys obtained/generated
# via *n6* Portal).
#
# Important: the value below is only an example, and -- for security
# purposes -- you are strongly advised not to use it in a production
# environment.
#
# *** Remember to provide a **secure** secret value ***
# ***   after uncommenting the following option!!!  ***
;stream_api_broker_auth.server_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED

# The rest of the
# `n6brokerauthapi.auth_stream_api.StreamApiBrokerAuthManagerMaker`-specific
# configuration (to be uncommented and adjusted if defaults are not sufficient):
;stream_api_broker_auth.push_exchange_name = _push
;stream_api_broker_auth.autogenerated_queue_prefix = stomp


###
# dev/test server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543


###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

[loggers]
keys = root, n6brokerauthapi, sqlalchemy

[handlers]
keys = console, syslog
;keys = console, syslog, amqp
;keys = console, syslog, amqp, file

[formatters]
keys = generic, cut_notraceback, only_message, time_and_message


[logger_root]
level = INFO
handlers = console, syslog
;handlers = console, syslog, amqp

[logger_n6brokerauthapi]
level = INFO
handlers =
# (propagate to the root handler)
propagate = 1
qualname = n6brokerauthapi

[logger_sqlalchemy]
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)
level = WARN
handlers =
propagate = 1
qualname = sqlalchemy.engine


[handler_syslog]
class = handlers.SysLogHandler
level = ERROR
formatter = cut_notraceback
args = ('/dev/log',)

[handler_console]
class = StreamHandler
level = WARN
formatter = generic
args = (sys.stderr,)

;[handler_amqp]
;class = n6lib.log_helpers.AMQPHandler
;level = INFO
;formatter = generic
# * AMQPHandler's `args` in the variant for
#   client-certificate-based authentication:
;args = (
;    {
;        'host': 'some-host-of-rabbitmq',
;        'port': 5671,
;        'ssl': True,
;        'ssl_ca_certs': '/some/path/to/CACertificatesFile.pem',
;        'ssl_certfile': '/some/path/to/ClientCertificateFile.pem',
;        'ssl_keyfile': '/some/path/to/private/ClientCertificateKeyFile.pem',
;    },
;    'logging',
;    {'exchange_type': 'topic', 'durable': True})
# * AMQPHandler's `args` in the variant for
#   username+password-based authentication:
;args = (
;    {
;        'host': 'some-host-of-rabbitmq',
;        'port': 5671,
;        'ssl': True,
;        'ssl_ca_certs': '/some/path/to/CACertificatesFile.pem',
;        'password_auth': True,
;        'username': '<some username>',
;        'password': '<some password -- at least 16 characters long>',
;    },
;    'logging',
;    {'exchange_type': 'topic', 'durable': True})
# ^
# Note: for a handler whose `class` is n6lib.log_helpers.AMQPHandler, the value of
# `args` is expected to be a Python tuple:
#
#    (<connection settings>, <exchange name>, <rest kwargs for exchange_declare()>)
#
# -- where <connection settings> should be:
#
#   a dict -- containing the AMQP connection settings being just **kwargs ready to
#   be passed to `n6lib.amqp_helpers.get_amqp_connection_params_dict_from_args()`
#   (see the signature and implementation of that function...)
#
#   [or alternatively -- if we say about the *legacy format* which is *deprecated*
#   and *should be avoided*: a dict ready to be passed directly to the constructor
#   `n6lib.amqp_getters_pushers.AMQPThreadedPusher` as the `connection_params_dict`
#   keyword argument...]

;[handler_file]
;class = FileHandler
;level = NOTSET
;formatter = cut
;args = ('/home/somebody/log_all',)


[formatter_generic]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s

# brief information: no tracebacks, messages no longer than ~2k
[formatter_cut_notraceback]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

[formatter_only_message]
format = %(message)s

[formatter_time_and_message]
format = [%(asctime)s] %(message)s

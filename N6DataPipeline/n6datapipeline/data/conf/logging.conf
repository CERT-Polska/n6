# See: https://docs.python.org/library/logging.config.html#configuration-file-format

#
# Declarations

[loggers]
keys = root,nonstandard_names

[handlers]
keys = syslog,stream,amqp
;keys = syslog,stream,amqp,file

[formatters]
keys = standard,cut_notraceback,cut,n6_syslog_handler

#
# Loggers

# the top-level (root) logger
# (gathers messages from almost all its sub-loggers...)
[logger_root]
level = INFO
handlers = syslog,stream,amqp

# the parent logger for *non-standard-names-dedicated*
# loggers -- each named according to the pattern:
# 'NONSTANDARD_NAMES.<event category name>';
# parser components use these loggers to report any
# non-standard values of the `name` attribute of events
# (see: n6lib.const.CATEGORY_TO_NORMALIZED_NAME)
[logger_nonstandard_names]
level = INFO
handlers = amqp
propagate = 0
qualname = NONSTANDARD_NAMES

#
# Handlers

[handler_syslog]
class = n6lib.log_helpers.N6SysLogHandler
level = ERROR
formatter = n6_syslog_handler
args = ('/dev/log',)

[handler_stream]
class = StreamHandler
level = INFO
formatter = standard
args = ()

[handler_amqp]
class = n6lib.log_helpers.AMQPHandler
level = INFO
args = (None, 'logging', {'exchange_type': 'topic', 'durable': True})
# ^
# Note: for a handler whose `class` is n6lib.log_helpers.AMQPHandler, the value of
# `args` is expected to be a Python tuple:
#
#    (<connection settings>, <exchange name>, <rest kwargs for exchange_declare()>)
#
# -- where <connection settings> should be one of:
#
#   * None -- then the AMQP connection settings will be taken from the global config,
#     see: N6DataPipeline's `00_global.conf` (but note that this possibility is *not*
#     available for N6Portal and N6RestApi...)
#
#   * a dict -- containing the AMQP connection settings being just **kwargs ready to
#     be passed to `n6lib.amqp_helpers.get_amqp_connection_params_dict_from_args()`
#     (see the signature and implementation of that function...)
#
#     [or alternatively -- if we say about the *legacy format* which is *deprecated*
#     and *should be avoided*: a dict ready to be passed directly to the constructor
#     `n6lib.amqp_getters_pushers.AMQPThreadedPusher` as the `connection_params_dict`
#     keyword argument...]

;[handler_file]
;class = FileHandler
;level = NOTSET
;formatter = cut
;args = ('/home/somebody/log_all',)

#
# Formatters

# full information
[formatter_standard]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s

# brief information: no tracebacks, messages no longer than ~2k
[formatter_cut_notraceback]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

# semi-brief information: with tracebacks but messages no longer than: ~2k + traceback length
[formatter_cut]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.CutFormatter

# same as formatter_cut_notraceback but with N6SysLogHandler's `script_basename` field included
[formatter_n6_syslog_handler]
format = n6: %(levelname) -10s %(asctime)s %(script_basename)s, %(name)s in %(funcName)s() (#%(lineno)d): %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

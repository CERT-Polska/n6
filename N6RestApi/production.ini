###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html
###

[app:main]
use = egg:n6web

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =


###
# event db configuration
###

## connection URL, e.g.: mysql+mysqldb://n6:somepassword@localhost/n6
## (it must start with `mysql+mysqldb:` (or just `mysql:`) because other
## dialects/drivers are not supported)
#sqlalchemy.url = mysql://user:password@host/dbname

## if you want to use SSL, the following options must be set to
## appropriate file paths:
#mysql.api.ssl_cacert = /some/path/to/CACertificatesFile.pem
#mysql.api.ssl_cert = /some/path/to/ClientCertificateFile.pem
#mysql.api.ssl_key = /some/path/to/private/ClientCertificateKeyFile.pem

# The length, in days, of time windows (aka *steps*) in which separate
# (partial) queries will be performed. We (the authors of *n6*) decided
# to partition queries into narrower *step* queries for performance
# reasons, based on our real-world experience. You may want to adjust
# this option to your needs, preferably based on your own performance
# measurements (if your instance of *n6* does not have to deal with
# large amounts of data in its Event DB, you may even want to get rid
# of that partitioning completely, just by setting this option to a
# sufficiently big value, such as 50000).
;day_step = 1

##########################################################################################
# Enabling SSL on MySQL server (example):
# * execute in the MySQL shell:
#   GRANT ALL PRIVILEGES ON *.* TO 'user'@'%' IDENTIFIED BY 'password' REQUIRE SSL;
#   or
#   GRANT ALL on *.* TO 'user'@'host' REQUIRE
#       SUBJECT '/O=.../...'
#       AND ISSUER '/O=.../...';
# * add SSL configuration to mysql server in file /etc/my.cnf in section [mysqld]:
#   ssl-ca=/some/path/to/CACertificatesFile.pem
#   ssl-cert=/some/path/to/ServerCertificateFile.pem
#   ssl-key=/some/path/to/private/ServerCertificateKeyFile.pem
##########################################################################################


###
# auth db configuration
###

## connection URL, e.g.: mysql+mysqldb://n6:somepassword@localhost/n6
## (it must start with `mysql+mysqldb:` (or just `mysql:`) because other
## dialects/drivers are not supported)
#auth_db.url = mysql://user:password@host/dbname

## if you want to use SSL, the following options must be set to
## appropriate file paths:
#auth_db.ssl_cacert = /some/path/to/CACertificatesFile.pem
#auth_db.ssl_cert = /some/path/to/ClientCertificateFile.pem
#auth_db.ssl_key = /some/path/to/private/ClientCertificateKeyFile.pem


###
# api key configuration
###

# Setting the following option makes it possible for users to
# authenticate to *n6* REST API (but not to the *n6* Portal's API!)
# with their individual API keys.
#
# The value below is only an example, and -- for security purposes --
# you are strongly advised not to use it in a production environment.
#
# You can generate a safe secret using, for example, this command:
#
#     python -c 'import os, base64; print(base64.b64encode(os.urandom(40), b"-_").decode())'
#
# (then copy the line printed to the console and paste it as the value
# of the following option).
#
# Please note that the value of this option has to be identical in the
# *n6* Portal API's and REST API's configuration files (if not, users
# will be unable to authenticate to *n6* REST API with any API keys
# obtained/generated via *n6* Portal).
#
# *** Remember to provide a **secure** secret value ***
# ***   after uncommenting the following option!!!  ***
;api_key_based_auth.server_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED


###
# dev/test server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543


###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

[loggers]
keys = root, n6web, sqlalchemy

[handlers]
keys = console, syslog
#keys = console, syslog, amqp
#keys = console, syslog, amqp, file

[formatters]
keys = generic, cut_notraceback, only_message, time_and_message


[logger_root]
level = INFO
handlers = console, syslog
#handlers = console, syslog, amqp

[logger_n6web]
level = INFO
handlers =
# (propagate to the root handler)
propagate = 1
qualname = n6web

[logger_sqlalchemy]
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)
level = WARN
handlers =
propagate = 1
qualname = sqlalchemy.engine


[handler_syslog]
class = handlers.SysLogHandler
level = ERROR
formatter = cut_notraceback
args = ('/dev/log',)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = WARN
formatter = generic

#[handler_amqp]
#class = n6lib.log_helpers.AMQPHandler
#level = INFO
#args = (
#        {'host': 'some-host-of-rabbitmq',
#         'port': 5671,
#         'ssl': True,
#         'ssl_options': {
#             'ca_certs': '/some/path/to/CACertificatesFile.pem',
#             'certfile': '/some/path/to/ClientCertificateFile.pem',
#             'keyfile': '/some/path/to/private/ClientCertificateKeyFile.pem',
#             'cert_reqs': __import__('ssl', level=0).CERT_REQUIRED,
#         },
#        },
#        'logging',
#        {'exchange_type': 'topic', 'durable': True})
#formatter = generic

#[handler_file]
#class = FileHandler
#level = NOTSET
#formatter = cut
#args = ('/home/somebody/log_all',)


[formatter_generic]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s

# brief information: no tracebacks, messages no longer than ~2k
[formatter_cut_notraceback]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s
class = n6lib.log_helpers.NoTracebackCutFormatter

[formatter_only_message]
format = %(message)s

[formatter_time_and_message]
format = [%(asctime)s] %(message)s

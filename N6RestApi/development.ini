###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html
###

[app:main]
use = egg:n6web

pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
    pyramid_debugtoolbar

## By default, the toolbar only appears for clients from IP addresses
## '127.0.0.1' and '::1'.
#debugtoolbar.hosts = 127.0.0.1 ::1


dev_fake_auth = true
#dev_fake_auth.org_id = example.org
#dev_fake_auth.user_id = example@example.org


###
# event db configuration
###

## connection URL, e.g.: mysql+mysqldb://n6:somepassword@localhost/n6
## (it must start with `mysql+mysqldb:` (or just `mysql:`) because other
## dialects/drivers are not supported)
#sqlalchemy.url = mysql://user:password@host/dbname

## if you want to use SSL, the following options must be set to
## appropriate file paths:
#mysql.api.ssl_cacert = /some/path/to/CACertificatesFile.pem
#mysql.api.ssl_cert = /some/path/to/ClientCertificateFile.pem
#mysql.api.ssl_key = /some/path/to/private/ClientCertificateKeyFile.pem

##########################################################################################
# Enabling SSL on MySQL server (example):
# * execute in the MySQL shell:
#   GRANT ALL PRIVILEGES ON *.* TO 'user'@'%' IDENTIFIED BY 'password' REQUIRE SSL;
#   or
#   GRANT ALL on *.* TO 'user'@'host' REQUIRE
#       SUBJECT '/O=.../...'
#       AND ISSUER '/O=.../...';
# * add SSL configuration to mysql server in file /etc/my.cnf in section [mysqld]:
#   ssl-ca=/some/path/to/CACertificatesFile.pem
#   ssl-cert=/some/path/to/ServerCertificateFile.pem
#   ssl-key=/some/path/to/private/ServerCertificateKeyFile.pem
##########################################################################################


###
# auth db configuration
###

## connection URL, e.g.: mysql+mysqldb://n6:somepassword@localhost/n6
## it must start with `mysql+mysqldb:` (or just `mysql:`) because other
## dialects/drivers are not supported
#auth_db.url = mysql://user:password@host/dbname

## if you want to use SSL, the following options must be set to
## appropriate file paths:
#auth_db.ssl_cacert = /some/path/to/CACertificatesFile.pem
#auth_db.ssl_cert = /some/path/to/ClientCertificateFile.pem
#auth_db.ssl_key = /some/path/to/private/ClientCertificateKeyFile.pem


###
# auth api prefetching configuration
###

# The following three options' values must be integer numbers. Each of
# them expresses a number of seconds.
auth_api_prefetching.max_sleep_between_runs = 12               ; must not be less than 5
auth_api_prefetching.tolerance_for_outdated = 300              ; must not be less than 60
auth_api_prefetching.tolerance_for_outdated_on_error = 1200    ; must not be less than 0

# The following two options (`auth_api_prefetching.pickle_cache_dir` and
# `auth_api_prefetching.pickle_cache_signature_secret`) are related to
# the *pickle cache* mechanism, which is an optional addition to the
# *Auth API prefetching* machinery, supposed to improve prefetching
# performance (in particular when multiple processes share the same
# *pickle cache* directory). You can enable this optional mechanism by
# setting these two options to non-blank values.
#
# The values of these two options placed below (and commented out) are
# only example ones. In particular, you are -- for security reasons --
# strongly advised not to use in a production environment the example
# value of `auth_api_prefetching.pickle_cache_signature_secret`!
#
# You can generate a safe secret using, for example, this command:
#
#     python -c 'import os, base64; print(base64.b64encode(os.urandom(64), b"-_").decode())'
#
# (then copy the line printed to the console and paste it as the value
# of the following option).

# ***Important:*** our processes need to have *read-and-write* access
# to any files within this directory, including also the possibility to
# create and delete those files. At the same time, on production, they
# should *not* be accessible for any unauthorized users/processes, not
# even just for reading, because some of those files contain (possibly
# sensitive) data from Auth DB (*note:* even though, the integrity of
# the concerned files is verified using a HMAC-like mechanism, they are
# *not* encrypted at all!).
;auth_api_prefetching.pickle_cache_dir = /tmp/n6-auth-api-prefetching-pickle-cache

# ***Important:*** if the following secret is compromised, an attacker
# might be able to tamper with the *pickle* file content (provided they
# also manage to gain write access to that file) -- which would make
# them able not only to modify the authorization stuff *but also* to
# conduct an *arbitrary code execution* attack! (see the warning near
# the beginning of the docs of the standard library `pickle` module...).
;auth_api_prefetching.pickle_cache_signature_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED ON PRODUCTION SYSTEM


###
# api key configuration
###

# Setting the following option makes it possible for users to
# authenticate to *n6* REST API (but not to the *n6* Portal's API!)
# with their individual API keys.
#
# The value below is only an example, and -- for security purposes --
# you are strongly advised not to use it in a production environment.
#
# You can generate a safe secret using, for example, this command:
#
#     python -c 'import os, base64; print(base64.b64encode(os.urandom(40), b"-_").decode())'
#
# (then copy the line printed to the console and paste it as the value
# of the following option).
#
# Please note that the value of this option has to be identical in the
# *n6* Portal API's and REST API's configuration files (if not, users
# will be unable to authenticate to *n6* REST API with any API keys
# obtained/generated via *n6* Portal).
api_key_based_auth.server_secret = INSECURE EXAMPLE VALUE THAT MUST BE REPLACED


###
# dev/test server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543


###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

[loggers]
keys = root, n6web, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_n6web]
level = DEBUG
handlers =
# (proparate to the root handler)
propagate = 1
qualname = n6web

[logger_sqlalchemy]
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)
level = INFO
handlers =
# (proparate to the root handler)
propagate = 1
qualname = sqlalchemy.engine

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = n6: %(levelname) -10s %(asctime)s %(name) -25s in %(funcName)s() (#%(lineno)d) [%(threadName)s]: %(message)s

# -*- coding: utf-8 -*-

from n6sdk.class_helpers import singleton


@singleton
class DataBackendAPI(object):

    def __init__(self, settings):
        """
        Data backend initialization.

        Args:
            `settings` (a dict):
                A dictionary of settings from the *.ini file.
        """
        ##
        ## TODO: implement here the following activities:
        ##
        ## 1. Get the storage backend settings (if any) from the given
        ##    `settings` dictionary (apropriate items should have been
        ##    placed in the `[app:main]` section of the *.ini file).
        ##
        ## 2. Configure the storage backend (for example, create the
        ##    database connection).

    ##
    ## Below: one or more data query methods.  Such a method:
    ##
    ## * can have any name;
    ##
    ## * *must* take two *positional arguments*:
    ##
    ##   * `auth_data` -- authentication data, relevant only if you need
    ##     to implement some kind of authorization based on it; its type
    ##     and format depends on the authentication policy you use (see
    ##     the *n6sdk* tutorial);
    ##
    ##   * `params` -- a dictionary containing cleaned (i.e., validated
    ##     and normalized with `<data
    ##     specification>/clean_param_dict()`) client query parameters;
    ##     the dictionary maps parameter names (strings) to lists of
    ##     parameter values;
    ##
    ##   (note: it can also take some additional *keyword arguments*
    ##   -- then you need to implement the `get_extra_api_kwargs()`
    ##   method in your custom `DefaultStreamViewBase` subclass...)
    ##
    ## * *must* be a *generator function* (containing `yield`
    ##   instructions) or any other callable that returns an *iterator*;
    ##
    ## * should implement the activities described below.

    def generate_incidents(self, auth_data, params):
        """
        A data query method.

        Args:
            `auth_data`:
                Data in a custom format that may be used, e.g., to
                evaluate permissions.
            `params` (a dict):
                Query parameters (used to query the database) sent
                by the user/browser and (already) cleaned with the
                `clean_param_dict()` method of your data specification.

        Yields:
            Events (aka result dicts -- each ready to be passed in to the
            `clean_result_dict()` method of your data specification).
        """
        ##
        ## TODO: implement here the following activities:
        ##
        ## 1. If needed: do any authorization checks based on the
        ##    `auth_data` and `params` arguments; raise
        ##    `n6sdk.exceptions.AuthorizationError` on failure.
        ##
        ## 2. Translate the contents of the params argument to some
        ##    storage-specific queries. (Obviously, when doing the
        ##    translation you may need, for example, to map params keys
        ##    to some storage-specific keys...).
        ##
        ##    NOTE: If the data specification includes dotted "extra
        ##    params" (such as `time.min`, `time.max`, `time.until`,
        ##    `fqdn.sub`, `ip.net` etc.) their semantics should be
        ##    implemented carefully.
        ##
        ## 3. If needed: perform a necessary storage-specific
        ##    maintenance activity (for example, re-new the database
        ##    connection).
        ##
        ## 4. Perform a storage-specific query (or queries).
        ##
        ##    NOTE: Sometimes you may want to limit the number of
        ##    allowed results -- then, raise
        ##    `n6sdk.exceptions.TooMuchDataError` if the limit is
        ##    exceeded.
        ##
        ## 5. Translate the results of the storage-specific query
        ##    (queries) to result dictionaries and `yield` each of these
        ##    dictionaries (each of them should be a dictionary ready to
        ##    be passed to the `clean_result_dict()` method of your data
        ##    specification).
        ##
        ##    (Obviously, when doing the translation, you may need, for
        ##    example, to map some storage-specific keys to the result
        ##    keys accepted by the clean_result_dict() method of your
        ##    data specificaton class...)
        ##
        ##    If there are no results -- just do not yield any items
        ##    (the caller will obtain an empty iterator).
        ##
        ## In case of an internal error, do not be afraid to raise an
        ## exception -- any instance of the `Exception` built-in class
        ## (or of its subclass) will be handled automatically by the
        ## n6sdk machinery.

# -*- coding: utf-8 -*-

from n6sdk.pyramid_commons import (
    AnonymousAuthenticationPolicy,
    ConfigHelper,
    HttpResource,
)

### Some deeper customizations are also possible: you can use your
### customized subclasses of particular components instead of the
### standard ones...
#from ...your module... import (
#    {{capitalized_package}}AuthenticationPolicy,
#    {{capitalized_package}}ConfigHelper,
#    {{capitalized_package}}HttpResource,
#    {{capitalized_package}}StreamViewBase,
#)

from .data_spec import {{capitalized_package}}DataSpec
from .data_backend_api import DataBackendAPI


# Define REST API resources here, each referring to a particular kind of data query
# (this is how we map URLs to particular data query methods...)
RESOURCES = [
    HttpResource(
        # resource unique id
        resource_id='/incidents',

        # URL path used to access the resource
        # (when you use the default view base class the `.{renderer}`
        # placeholder at the end of the string is mandatory!)
        url_pattern='/incidents.{renderer}',

        view_properties=dict(
            # an *instance* of our data specification class (to be used to
            # validate and normalize query parameters as well as results)
            data_spec={{capitalized_package}}DataSpec(),

            # the *name* of the data query method of DataBackendAPI
            # to be called for this resource
            data_backend_api_method='generate_incidents',

            # renderers available for this resource
            # ('json' and 'sjson' are provided out-of-the-box)
            renderers=('json', 'sjson'),
        ),
    ),
    ### There can be more than one resource...
    #HttpResource(
    #    resource_id=...,
    #    url_pattern='/....{renderer}',
    #    view_properties=dict(
    #        data_spec=...,
    #        data_backend_api_method=...,
    #        renderers=...,
    #    ),
    #),
    #HttpResource(
    #    resource_id=...,
    #    ...
    #    # Instead of the standard n6sdk.pyramid_commons.DefaultStreamViewBase
    #    # view base class we can use its customized subclass:
    #    view_base={{capitalized_package}}StreamViewBase,
    #
    #    # By default it is GET only:
    #    http_methods=('GET', 'POST'),
    #),
]

### You can also quite easily configure the static
### content view if you need to have one...  (See:
### http://docs.pylonsproject.org/projects/pyramid/en/{{pyramid_docs_branch}}/api/config.html#pyramid.config.Configurator.add_static_view)
#STATIC_VIEW_CONFIG = {
#    'name': 'static',  # application-relative local URL prefix
#    'path': 'static',  # static files directory path on disk
#}


def main(global_config, **settings):
    helper = ConfigHelper(
        # a dict of settings from the *.ini file
        settings=settings,

        # a data backend API *class* (not instance)
        data_backend_api_class=DataBackendAPI,

        # an *instance* of an authentication policy class
        authentication_policy=AnonymousAuthenticationPolicy(),

        # the list of HTTP resources defined above
        resources=RESOURCES,

        ### possible optional arguments, in particular:
        #static_view_config=STATIC_VIEW_CONFIG,
    )

    ### NOTE: `helper.config` is a `pyramid.config.Configurator` instance.
    ### Here you can call some of its methods if you wish...
    ### (See: http://docs.pylonsproject.org/projects/pyramid/en/{{pyramid_docs_branch}}/api/config.html#pyramid.config.Configurator)
    #helper.config....

    return helper.make_wsgi_app()
